
i2c_device_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004170  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004404  08004404  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800440c  0800440c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08004484  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004484  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d752  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d38  00000000  00000000  0002d7f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  0002f530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  00030138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f0d  00000000  00000000  00030c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a84  00000000  00000000  00051b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c207f  00000000  00000000  0005b5d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038fc  00000000  00000000  0011d6d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042e8 	.word	0x080042e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080042e8 	.word	0x080042e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb30 	bl	8000bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f849 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f917 	bl	80007b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000582:	f000 f8a7 	bl	80006d4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f8e3 	bl	8000750 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  int i = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
  int result = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
  printf("SCANNING I2C DEVICE...");
 8000592:	481a      	ldr	r0, [pc, #104]	; (80005fc <main+0x8c>)
 8000594:	f002 ff16 	bl	80033c4 <iprintf>

  for(i=0; i<128; i++)
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e029      	b.n	80005f2 <main+0x82>
  {
	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	b299      	uxth	r1, r3
 80005a6:	2302      	movs	r3, #2
 80005a8:	2202      	movs	r2, #2
 80005aa:	4815      	ldr	r0, [pc, #84]	; (8000600 <main+0x90>)
 80005ac:	f000 fe65 	bl	800127a <HAL_I2C_IsDeviceReady>
 80005b0:	4603      	mov	r3, r0
 80005b2:	603b      	str	r3, [r7, #0]
	  if(result != HAL_OK) // jika result tidak OK
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <main+0x52>
	  {
		  printf("."); // maka print titik-titik
 80005ba:	202e      	movs	r0, #46	; 0x2e
 80005bc:	f002 ff1a 	bl	80033f4 <putchar>
 80005c0:	e003      	b.n	80005ca <main+0x5a>
	  }
	  else // jika result OK
	  {
		  printf("0x%X",i); // maka print address
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <main+0x94>)
 80005c6:	f002 fefd 	bl	80033c4 <iprintf>
	  }

	  if(i%24==0) // ini biar gak memanjang kesamping titik-titiknya
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <main+0x98>)
 80005ce:	fb83 2301 	smull	r2, r3, r3, r1
 80005d2:	109a      	asrs	r2, r3, #2
 80005d4:	17cb      	asrs	r3, r1, #31
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	4613      	mov	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	4413      	add	r3, r2
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	1aca      	subs	r2, r1, r3
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d102      	bne.n	80005ec <main+0x7c>
	  {
		  printf("\r\n");
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x9c>)
 80005e8:	f002 ff74 	bl	80034d4 <puts>
  for(i=0; i<128; i++)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b7f      	cmp	r3, #127	; 0x7f
 80005f6:	ddd2      	ble.n	800059e <main+0x2e>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x88>
 80005fa:	bf00      	nop
 80005fc:	08004300 	.word	0x08004300
 8000600:	20000098 	.word	0x20000098
 8000604:	08004318 	.word	0x08004318
 8000608:	2aaaaaab 	.word	0x2aaaaaab
 800060c:	08004320 	.word	0x08004320

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0ac      	sub	sp, #176	; 0xb0
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fec8 	bl	80033b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2254      	movs	r2, #84	; 0x54
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 feba 	bl	80033b4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000640:	2310      	movs	r3, #16
 8000642:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	; 0x60
 8000652:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f84d 	bl	8001700 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800066c:	f000 f8ca 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000674:	2300      	movs	r3, #0
 8000676:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fc58 	bl	8001f40 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000696:	f000 f8b5 	bl	8000804 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800069a:	2342      	movs	r3, #66	; 0x42
 800069c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fe4d 	bl	8002348 <HAL_RCCEx_PeriphCLKConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006b4:	f000 f8a6 	bl	8000804 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006bc:	f000 ffca 	bl	8001654 <HAL_PWREx_ControlVoltageScaling>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006c6:	f000 f89d 	bl	8000804 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	37b0      	adds	r7, #176	; 0xb0
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	f640 6214 	movw	r2, #3604	; 0xe14
 80006e4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_I2C1_Init+0x74>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_I2C1_Init+0x74>)
 8000712:	f000 fd23 	bl	800115c <HAL_I2C_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800071c:	f000 f872 	bl	8000804 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C1_Init+0x74>)
 8000724:	f000 fef0 	bl	8001508 <HAL_I2CEx_ConfigAnalogFilter>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800072e:	f000 f869 	bl	8000804 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000732:	2100      	movs	r1, #0
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x74>)
 8000736:	f000 ff32 	bl	800159e <HAL_I2CEx_ConfigDigitalFilter>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000740:	f000 f860 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000098 	.word	0x20000098
 800074c:	40005400 	.word	0x40005400

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART2_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000794:	f002 f8ba 	bl	800290c <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f831 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000e4 	.word	0x200000e4
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_GPIO_Init+0x2c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <MX_GPIO_Init+0x2c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_GPIO_Init+0x2c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <__io_putchar>:

/* USER CODE BEGIN 4 */
//PRITF
int __io_putchar(int ch)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 80007e8:	1d39      	adds	r1, r7, #4
 80007ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ee:	2201      	movs	r2, #1
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <__io_putchar+0x20>)
 80007f2:	f002 f8d9 	bl	80029a8 <HAL_UART_Transmit>
	return ch;
 80007f6:	687b      	ldr	r3, [r7, #4]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000e4 	.word	0x200000e4

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <HAL_MspInit+0x44>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6613      	str	r3, [r2, #96]	; 0x60
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_MspInit+0x44>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x44>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6593      	str	r3, [r2, #88]	; 0x58
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <HAL_I2C_MspInit+0x80>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d129      	bne.n	80008d2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_I2C_MspInit+0x84>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_I2C_MspInit+0x84>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_I2C_MspInit+0x84>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000896:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089c:	2312      	movs	r3, #18
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a8:	2304      	movs	r3, #4
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f000 fae7 	bl	8000e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_I2C_MspInit+0x84>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_I2C_MspInit+0x84>)
 80008c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_I2C_MspInit+0x84>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40005400 	.word	0x40005400
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a20      	ldr	r2, [pc, #128]	; (8000984 <HAL_UART_MspInit+0xa0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d13a      	bne.n	800097c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <HAL_UART_MspInit+0xa4>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <HAL_UART_MspInit+0xa4>)
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	6593      	str	r3, [r2, #88]	; 0x58
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <HAL_UART_MspInit+0xa4>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <HAL_UART_MspInit+0xa4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a19      	ldr	r2, [pc, #100]	; (8000988 <HAL_UART_MspInit+0xa4>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_UART_MspInit+0xa4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000936:	2304      	movs	r3, #4
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000946:	2307      	movs	r3, #7
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 fa98 	bl	8000e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800096a:	2303      	movs	r3, #3
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f000 fa86 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40004400 	.word	0x40004400
 8000988:	40021000 	.word	0x40021000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f94e 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e00a      	b.n	8000a10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009fa:	f3af 8000 	nop.w
 80009fe:	4601      	mov	r1, r0
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	60ba      	str	r2, [r7, #8]
 8000a06:	b2ca      	uxtb	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbf0      	blt.n	80009fa <_read+0x12>
	}

return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e009      	b.n	8000a48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	60ba      	str	r2, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fecf 	bl	80007e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbf1      	blt.n	8000a34 <_write+0x12>
	}
	return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_close>:

int _close(int file)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	return -1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a82:	605a      	str	r2, [r3, #4]
	return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_isatty>:

int _isatty(int file)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	return 1;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <_sbrk+0x50>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x16>
		heap_end = &end;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <_sbrk+0x50>)
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <_sbrk+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <_sbrk+0x50>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <_sbrk+0x50>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	466a      	mov	r2, sp
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d907      	bls.n	8000afe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000aee:	f002 fc37 	bl	8003360 <__errno>
 8000af2:	4602      	mov	r2, r0
 8000af4:	230c      	movs	r3, #12
 8000af6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000afc:	e006      	b.n	8000b0c <_sbrk+0x48>
	}

	heap_end += incr;
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <_sbrk+0x50>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <_sbrk+0x50>)
 8000b08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000008c 	.word	0x2000008c
 8000b18:	20000170 	.word	0x20000170

08000b1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x64>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <SystemInit+0x64>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <SystemInit+0x68>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <SystemInit+0x68>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <SystemInit+0x68>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <SystemInit+0x68>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <SystemInit+0x68>)
 8000b48:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b4c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <SystemInit+0x68>)
 8000b54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b58:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <SystemInit+0x68>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <SystemInit+0x68>)
 8000b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <SystemInit+0x68>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SystemInit+0x64>)
 8000b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b72:	609a      	str	r2, [r3, #8]
#endif
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	40021000 	.word	0x40021000

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b8e:	e003      	b.n	8000b98 <LoopCopyDataInit>

08000b90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b96:	3104      	adds	r1, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ba0:	d3f6      	bcc.n	8000b90 <CopyDataInit>
	ldr	r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ba4:	e002      	b.n	8000bac <LoopFillZerobss>

08000ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ba6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ba8:	f842 3b04 	str.w	r3, [r2], #4

08000bac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000bae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bb0:	d3f9      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb2:	f7ff ffb3 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f002 fbd9 	bl	800336c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fcd9 	bl	8000570 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000bc4:	08004414 	.word	0x08004414
	ldr	r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bcc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000bd0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000bd4:	2000016c 	.word	0x2000016c

08000bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_IRQHandler>

08000bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f91b 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f80e 	bl	8000c0c <HAL_InitTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	e001      	b.n	8000c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfc:	f7ff fe0a 	bl	8000814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d022      	beq.n	8000c66 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_InitTick+0x6c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_InitTick+0x68>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f91a 	bl	8000e6e <HAL_SYSTICK_Config>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10f      	bne.n	8000c60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	d809      	bhi.n	8000c5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c46:	2200      	movs	r2, #0
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c4e:	f000 f8f2 	bl	8000e36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0x70>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e004      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e001      	b.n	8000c6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	20000164 	.word	0x20000164
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000164 	.word	0x20000164

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e00:	f7ff ff8e 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff47 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff5c 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff8e 	bl	8000d74 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5d 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffb0 	bl	8000ddc <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	e148      	b.n	800112a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 813a 	beq.w	8001124 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d00b      	beq.n	8000ed0 <HAL_GPIO_Init+0x48>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d007      	beq.n	8000ed0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec4:	2b11      	cmp	r3, #17
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b12      	cmp	r3, #18
 8000ece:	d130      	bne.n	8000f32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f06:	2201      	movs	r2, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	f003 0201 	and.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0xea>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b12      	cmp	r3, #18
 8000f70:	d123      	bne.n	8000fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	08da      	lsrs	r2, r3, #3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3208      	adds	r2, #8
 8000fb4:	6939      	ldr	r1, [r7, #16]
 8000fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0203 	and.w	r2, r3, #3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8094 	beq.w	8001124 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <HAL_GPIO_Init+0x2c0>)
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001000:	4a51      	ldr	r2, [pc, #324]	; (8001148 <HAL_GPIO_Init+0x2c0>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6613      	str	r3, [r2, #96]	; 0x60
 8001008:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <HAL_GPIO_Init+0x2c0>)
 800100a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001014:	4a4d      	ldr	r2, [pc, #308]	; (800114c <HAL_GPIO_Init+0x2c4>)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800103e:	d00d      	beq.n	800105c <HAL_GPIO_Init+0x1d4>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a43      	ldr	r2, [pc, #268]	; (8001150 <HAL_GPIO_Init+0x2c8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d007      	beq.n	8001058 <HAL_GPIO_Init+0x1d0>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a42      	ldr	r2, [pc, #264]	; (8001154 <HAL_GPIO_Init+0x2cc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d101      	bne.n	8001054 <HAL_GPIO_Init+0x1cc>
 8001050:	2302      	movs	r3, #2
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x1d6>
 8001054:	2307      	movs	r3, #7
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x1d6>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x1d6>
 800105c:	2300      	movs	r3, #0
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106e:	4937      	ldr	r1, [pc, #220]	; (800114c <HAL_GPIO_Init+0x2c4>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a0:	4a2d      	ldr	r2, [pc, #180]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f4:	4a18      	ldr	r2, [pc, #96]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f47f aeaf 	bne.w	8000e98 <HAL_GPIO_Init+0x10>
  }
}
 800113a:	bf00      	nop
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	40010400 	.word	0x40010400

0800115c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e081      	b.n	8001272 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d106      	bne.n	8001188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fb6a 	bl	800085c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2224      	movs	r2, #36	; 0x24
 800118c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d107      	bne.n	80011d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	e006      	b.n	80011e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d104      	bne.n	80011f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001208:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001218:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	ea42 0103 	orr.w	r1, r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	021a      	lsls	r2, r3, #8
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69d9      	ldr	r1, [r3, #28]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1a      	ldr	r2, [r3, #32]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2220      	movs	r2, #32
 800125e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b08a      	sub	sp, #40	; 0x28
 800127e:	af02      	add	r7, sp, #8
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b20      	cmp	r3, #32
 8001298:	f040 80f1 	bne.w	800147e <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012aa:	d101      	bne.n	80012b0 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80012ac:	2302      	movs	r3, #2
 80012ae:	e0e7      	b.n	8001480 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_I2C_IsDeviceReady+0x44>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e0e0      	b.n	8001480 <HAL_I2C_IsDeviceReady+0x206>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2224      	movs	r2, #36	; 0x24
 80012ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <HAL_I2C_IsDeviceReady+0x72>
 80012dc:	897b      	ldrh	r3, [r7, #10]
 80012de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ea:	e004      	b.n	80012f6 <HAL_I2C_IsDeviceReady+0x7c>
 80012ec:	897b      	ldrh	r3, [r7, #10]
 80012ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012f2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff fcd2 	bl	8000ca4 <HAL_GetTick>
 8001300:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	2b20      	cmp	r3, #32
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b10      	cmp	r3, #16
 8001324:	bf0c      	ite	eq
 8001326:	2301      	moveq	r3, #1
 8001328:	2300      	movne	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800132e:	e034      	b.n	800139a <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001336:	d01a      	beq.n	800136e <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001338:	f7ff fcb4 	bl	8000ca4 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d302      	bcc.n	800134e <HAL_I2C_IsDeviceReady+0xd4>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2220      	movs	r2, #32
 8001352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f043 0220 	orr.w	r2, r3, #32
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e088      	b.n	8001480 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0320 	and.w	r3, r3, #32
 8001378:	2b20      	cmp	r3, #32
 800137a:	bf0c      	ite	eq
 800137c:	2301      	moveq	r3, #1
 800137e:	2300      	movne	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	2b10      	cmp	r3, #16
 8001390:	bf0c      	ite	eq
 8001392:	2301      	moveq	r3, #1
 8001394:	2300      	movne	r3, #0
 8001396:	b2db      	uxtb	r3, r3
 8001398:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800139a:	7ffb      	ldrb	r3, [r7, #31]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <HAL_I2C_IsDeviceReady+0x12c>
 80013a0:	7fbb      	ldrb	r3, [r7, #30]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0c4      	beq.n	8001330 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b10      	cmp	r3, #16
 80013b2:	d01a      	beq.n	80013ea <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	2120      	movs	r1, #32
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 f862 	bl	8001488 <I2C_WaitOnFlagUntilTimeout>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e058      	b.n	8001480 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2220      	movs	r2, #32
 80013d4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2220      	movs	r2, #32
 80013da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e04a      	b.n	8001480 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2200      	movs	r2, #0
 80013f2:	2120      	movs	r1, #32
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 f847 	bl	8001488 <I2C_WaitOnFlagUntilTimeout>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e03d      	b.n	8001480 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2210      	movs	r2, #16
 800140a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2220      	movs	r2, #32
 8001412:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d118      	bne.n	800144e <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800142a:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	2120      	movs	r1, #32
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f826 	bl	8001488 <I2C_WaitOnFlagUntilTimeout>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e01c      	b.n	8001480 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2220      	movs	r2, #32
 800144c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	f63f af3b 	bhi.w	80012d4 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2220      	movs	r2, #32
 8001462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f043 0220 	orr.w	r2, r3, #32
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800147e:	2302      	movs	r3, #2
  }
}
 8001480:	4618      	mov	r0, r3
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001498:	e022      	b.n	80014e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014a0:	d01e      	beq.n	80014e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a2:	f7ff fbff 	bl	8000ca4 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d302      	bcc.n	80014b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d113      	bne.n	80014e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	f043 0220 	orr.w	r2, r3, #32
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2220      	movs	r2, #32
 80014c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e00f      	b.n	8001500 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699a      	ldr	r2, [r3, #24]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	4013      	ands	r3, r2
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d0cd      	beq.n	800149a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b20      	cmp	r3, #32
 800151c:	d138      	bne.n	8001590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001528:	2302      	movs	r3, #2
 800152a:	e032      	b.n	8001592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2224      	movs	r2, #36	; 0x24
 8001538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800155a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6819      	ldr	r1, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	e000      	b.n	8001592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001590:	2302      	movs	r3, #2
  }
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	d139      	bne.n	8001628 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015be:	2302      	movs	r3, #2
 80015c0:	e033      	b.n	800162a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2224      	movs	r2, #36	; 0x24
 80015ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0201 	bic.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2220      	movs	r2, #32
 8001618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e000      	b.n	800162a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001628:	2302      	movs	r3, #2
  }
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <HAL_PWREx_GetVoltageRange+0x18>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40007000 	.word	0x40007000

08001654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001662:	d130      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001664:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800166c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001670:	d038      	beq.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2232      	movs	r2, #50	; 0x32
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	3301      	adds	r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001698:	e002      	b.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3b01      	subs	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ac:	d102      	bne.n	80016b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f2      	bne.n	800169a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c0:	d110      	bne.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e00f      	b.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d007      	beq.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40007000 	.word	0x40007000
 80016f8:	20000000 	.word	0x20000000
 80016fc:	431bde83 	.word	0x431bde83

08001700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	f000 bc11 	b.w	8001f36 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001714:	4ba0      	ldr	r3, [pc, #640]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800171e:	4b9e      	ldr	r3, [pc, #632]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80e4 	beq.w	80018fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <HAL_RCC_OscConfig+0x4c>
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	f040 808b 	bne.w	800185a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b01      	cmp	r3, #1
 8001748:	f040 8087 	bne.w	800185a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800174c:	4b92      	ldr	r3, [pc, #584]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x64>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e3e8      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	4b8b      	ldr	r3, [pc, #556]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_RCC_OscConfig+0x7e>
 8001774:	4b88      	ldr	r3, [pc, #544]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800177c:	e005      	b.n	800178a <HAL_RCC_OscConfig+0x8a>
 800177e:	4b86      	ldr	r3, [pc, #536]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800178a:	4293      	cmp	r3, r2
 800178c:	d223      	bcs.n	80017d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fd78 	bl	8002288 <RCC_SetFlashLatencyFromMSIRange>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e3c9      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a2:	4b7d      	ldr	r3, [pc, #500]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7c      	ldr	r2, [pc, #496]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b7a      	ldr	r3, [pc, #488]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4977      	ldr	r1, [pc, #476]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c0:	4b75      	ldr	r3, [pc, #468]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	4972      	ldr	r1, [pc, #456]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
 80017d4:	e025      	b.n	8001822 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d6:	4b70      	ldr	r3, [pc, #448]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6f      	ldr	r2, [pc, #444]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b6d      	ldr	r3, [pc, #436]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	496a      	ldr	r1, [pc, #424]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f4:	4b68      	ldr	r3, [pc, #416]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	4965      	ldr	r1, [pc, #404]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fd38 	bl	8002288 <RCC_SetFlashLatencyFromMSIRange>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e389      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001822:	f000 fc6f 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8001826:	4601      	mov	r1, r0
 8001828:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	4a5a      	ldr	r2, [pc, #360]	; (800199c <HAL_RCC_OscConfig+0x29c>)
 8001834:	5cd3      	ldrb	r3, [r2, r3]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	fa21 f303 	lsr.w	r3, r1, r3
 800183e:	4a58      	ldr	r2, [pc, #352]	; (80019a0 <HAL_RCC_OscConfig+0x2a0>)
 8001840:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001842:	4b58      	ldr	r3, [pc, #352]	; (80019a4 <HAL_RCC_OscConfig+0x2a4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f9e0 	bl	8000c0c <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d052      	beq.n	80018fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	e36d      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d032      	beq.n	80018c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001862:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800186e:	f7ff fa19 	bl	8000ca4 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001876:	f7ff fa15 	bl	8000ca4 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e356      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001888:	4b43      	ldr	r3, [pc, #268]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a3f      	ldr	r2, [pc, #252]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	493a      	ldr	r1, [pc, #232]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	4935      	ldr	r1, [pc, #212]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
 80018c6:	e01a      	b.n	80018fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018c8:	4b33      	ldr	r3, [pc, #204]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a32      	ldr	r2, [pc, #200]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018d4:	f7ff f9e6 	bl	8000ca4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018dc:	f7ff f9e2 	bl	8000ca4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e323      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1dc>
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d073      	beq.n	80019f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b08      	cmp	r3, #8
 800190e:	d005      	beq.n	800191c <HAL_RCC_OscConfig+0x21c>
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d10e      	bne.n	8001934 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d10b      	bne.n	8001934 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d063      	beq.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d15f      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e300      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x24c>
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0x288>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x270>
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a0c      	ldr	r2, [pc, #48]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0x288>
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a05      	ldr	r2, [pc, #20]	; (8001998 <HAL_RCC_OscConfig+0x298>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01b      	beq.n	80019c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff f988 	bl	8000ca4 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001996:	e010      	b.n	80019ba <HAL_RCC_OscConfig+0x2ba>
 8001998:	40021000 	.word	0x40021000
 800199c:	08004324 	.word	0x08004324
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff f97c 	bl	8000ca4 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e2bd      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ba:	4baf      	ldr	r3, [pc, #700]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x2a8>
 80019c6:	e014      	b.n	80019f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f96c 	bl	8000ca4 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f968 	bl	8000ca4 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e2a9      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e2:	4ba5      	ldr	r3, [pc, #660]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x2d0>
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d060      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_OscConfig+0x310>
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d119      	bne.n	8001a3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d116      	bne.n	8001a3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a10:	4b99      	ldr	r3, [pc, #612]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x328>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e286      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b93      	ldr	r3, [pc, #588]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	4990      	ldr	r1, [pc, #576]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a3c:	e040      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d023      	beq.n	8001a8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a46:	4b8c      	ldr	r3, [pc, #560]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a8b      	ldr	r2, [pc, #556]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff f927 	bl	8000ca4 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f923 	bl	8000ca4 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e264      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6c:	4b82      	ldr	r3, [pc, #520]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	497c      	ldr	r1, [pc, #496]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
 8001a8c:	e018      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	4b7a      	ldr	r3, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a79      	ldr	r2, [pc, #484]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f903 	bl	8000ca4 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f8ff 	bl	8000ca4 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e240      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab4:	4b70      	ldr	r3, [pc, #448]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d03c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad4:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ada:	4a67      	ldr	r2, [pc, #412]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f8de 	bl	8000ca4 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f8da 	bl	8000ca4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e21b      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afe:	4b5e      	ldr	r3, [pc, #376]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ef      	beq.n	8001aec <HAL_RCC_OscConfig+0x3ec>
 8001b0c:	e01b      	b.n	8001b46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0e:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b14:	4a58      	ldr	r2, [pc, #352]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f8c1 	bl	8000ca4 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b26:	f7ff f8bd 	bl	8000ca4 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1fe      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b38:	4b4f      	ldr	r3, [pc, #316]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ef      	bne.n	8001b26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80a6 	beq.w	8001ca0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b58:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10d      	bne.n	8001b80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b64:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b68:	4a43      	ldr	r2, [pc, #268]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b70:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <HAL_RCC_OscConfig+0x57c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d118      	bne.n	8001bbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x57c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <HAL_RCC_OscConfig+0x57c>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b98:	f7ff f884 	bl	8000ca4 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba0:	f7ff f880 	bl	8000ca4 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1c1      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <HAL_RCC_OscConfig+0x57c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d108      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4d8>
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bcc:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd6:	e024      	b.n	8001c22 <HAL_RCC_OscConfig+0x522>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d110      	bne.n	8001c02 <HAL_RCC_OscConfig+0x502>
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be6:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c00:	e00f      	b.n	8001c22 <HAL_RCC_OscConfig+0x522>
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001c1a:	f023 0304 	bic.w	r3, r3, #4
 8001c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d016      	beq.n	8001c58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f83b 	bl	8000ca4 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff f837 	bl	8000ca4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e176      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_OscConfig+0x578>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0ed      	beq.n	8001c32 <HAL_RCC_OscConfig+0x532>
 8001c56:	e01a      	b.n	8001c8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7ff f824 	bl	8000ca4 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff f820 	bl	8000ca4 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d906      	bls.n	8001c80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e15f      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c80:	4baa      	ldr	r3, [pc, #680]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e8      	bne.n	8001c60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d105      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c94:	4ba5      	ldr	r3, [pc, #660]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c98:	4aa4      	ldr	r2, [pc, #656]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d03c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01c      	beq.n	8001cee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cb4:	4b9d      	ldr	r3, [pc, #628]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cba:	4a9c      	ldr	r2, [pc, #624]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7fe ffee 	bl	8000ca4 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ccc:	f7fe ffea 	bl	8000ca4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e12b      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cde:	4b93      	ldr	r3, [pc, #588]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ef      	beq.n	8001ccc <HAL_RCC_OscConfig+0x5cc>
 8001cec:	e01b      	b.n	8001d26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cee:	4b8f      	ldr	r3, [pc, #572]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cf4:	4a8d      	ldr	r2, [pc, #564]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfe:	f7fe ffd1 	bl	8000ca4 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d06:	f7fe ffcd 	bl	8000ca4 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e10e      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d18:	4b84      	ldr	r3, [pc, #528]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ef      	bne.n	8001d06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8102 	beq.w	8001f34 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	f040 80c5 	bne.w	8001ec4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d3a:	4b7c      	ldr	r3, [pc, #496]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0203 	and.w	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d12c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d123      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d11b      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d113      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d109      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d067      	beq.n	8001e78 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d062      	beq.n	8001e74 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0bb      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5a      	ldr	r2, [pc, #360]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dca:	f7fe ff6b 	bl	8000ca4 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7fe ff67 	bl	8000ca4 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0a8      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de4:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df0:	4b4e      	ldr	r3, [pc, #312]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <HAL_RCC_OscConfig+0x830>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e00:	3a01      	subs	r2, #1
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	4311      	orrs	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0a:	0212      	lsls	r2, r2, #8
 8001e0c:	4311      	orrs	r1, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e12:	0852      	lsrs	r2, r2, #1
 8001e14:	3a01      	subs	r2, #1
 8001e16:	0552      	lsls	r2, r2, #21
 8001e18:	4311      	orrs	r1, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e1e:	0852      	lsrs	r2, r2, #1
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0652      	lsls	r2, r2, #25
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e2a:	06d2      	lsls	r2, r2, #27
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	493f      	ldr	r1, [pc, #252]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e34:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a3c      	ldr	r2, [pc, #240]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e40:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a39      	ldr	r2, [pc, #228]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e4c:	f7fe ff2a 	bl	8000ca4 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe ff26 	bl	8000ca4 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e067      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e72:	e05f      	b.n	8001f34 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e05e      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e78:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d157      	bne.n	8001f34 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a28      	ldr	r2, [pc, #160]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e90:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e9c:	f7fe ff02 	bl	8000ca4 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe fefe 	bl	8000ca4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e03f      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x7a4>
 8001ec2:	e037      	b.n	8001f34 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b0c      	cmp	r3, #12
 8001ec8:	d02d      	beq.n	8001f26 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ee8:	f023 0303 	bic.w	r3, r3, #3
 8001eec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ef4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7fe fed1 	bl	8000ca4 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7fe fecd 	bl	8000ca4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e00e      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0x806>
 8001f24:	e006      	b.n	8001f34 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e005      	b.n	8001f36 <HAL_RCC_OscConfig+0x836>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop

08001f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0c8      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f54:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d910      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b63      	ldr	r3, [pc, #396]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 0207 	bic.w	r2, r3, #7
 8001f6a:	4961      	ldr	r1, [pc, #388]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b5f      	ldr	r3, [pc, #380]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0b0      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d04c      	beq.n	800202a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f98:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d121      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e09e      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb0:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d115      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e092      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e086      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd8:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e07e      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fe8:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 0203 	bic.w	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	493f      	ldr	r1, [pc, #252]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffa:	f7fe fe53 	bl	8000ca4 <HAL_GetTick>
 8001ffe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002000:	e00a      	b.n	8002018 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002002:	f7fe fe4f 	bl	8000ca4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e066      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 020c 	and.w	r2, r3, #12
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	429a      	cmp	r2, r3
 8002028:	d1eb      	bne.n	8002002 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	492c      	ldr	r1, [pc, #176]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d210      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4924      	ldr	r1, [pc, #144]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e036      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4918      	ldr	r1, [pc, #96]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4910      	ldr	r1, [pc, #64]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b6:	f000 f825 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020ba:	4601      	mov	r1, r0
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	fa21 f303 	lsr.w	r3, r1, r3
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fd96 	bl	8000c0c <HAL_InitTick>
 80020e0:	4603      	mov	r3, r0
 80020e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80020e4:	7afb      	ldrb	r3, [r7, #11]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08004324 	.word	0x08004324
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x34>
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d121      	bne.n	8002176 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d11e      	bne.n	8002176 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002138:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002144:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 8002146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e005      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002160:	4a2a      	ldr	r2, [pc, #168]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10d      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002174:	e00a      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d102      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_RCC_GetSysClockFreq+0x10c>)
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e004      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d101      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_RCC_GetSysClockFreq+0x110>)
 800218a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d133      	bne.n	80021fa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d002      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0xa4>
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d003      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0xaa>
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021aa:	617b      	str	r3, [r7, #20]
      break;
 80021ac:	e005      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_RCC_GetSysClockFreq+0x110>)
 80021b0:	617b      	str	r3, [r7, #20]
      break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	617b      	str	r3, [r7, #20]
      break;
 80021b8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	3301      	adds	r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	fb02 f203 	mul.w	r2, r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_GetSysClockFreq+0x104>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0e5b      	lsrs	r3, r3, #25
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	3301      	adds	r3, #1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021fa:	69bb      	ldr	r3, [r7, #24]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3724      	adds	r7, #36	; 0x24
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	40021000 	.word	0x40021000
 800220c:	0800433c 	.word	0x0800433c
 8002210:	00f42400 	.word	0x00f42400
 8002214:	007a1200 	.word	0x007a1200

08002218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000000 	.word	0x20000000

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4601      	mov	r1, r0
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	08004334 	.word	0x08004334

0800225c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002260:	f7ff ffda 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002264:	4601      	mov	r1, r0
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0adb      	lsrs	r3, r3, #11
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	08004334 	.word	0x08004334

08002288 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002294:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022a0:	f7ff f9ca 	bl	8001638 <HAL_PWREx_GetVoltageRange>
 80022a4:	6178      	str	r0, [r7, #20]
 80022a6:	e014      	b.n	80022d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	4a24      	ldr	r2, [pc, #144]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b2:	6593      	str	r3, [r2, #88]	; 0x58
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022c0:	f7ff f9ba 	bl	8001638 <HAL_PWREx_GetVoltageRange>
 80022c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d8:	d10b      	bne.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b80      	cmp	r3, #128	; 0x80
 80022de:	d919      	bls.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2ba0      	cmp	r3, #160	; 0xa0
 80022e4:	d902      	bls.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e6:	2302      	movs	r3, #2
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e013      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ec:	2301      	movs	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e010      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d902      	bls.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022f8:	2303      	movs	r3, #3
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e00a      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d102      	bne.n	800230a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002304:	2302      	movs	r3, #2
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e004      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b70      	cmp	r3, #112	; 0x70
 800230e:	d101      	bne.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002310:	2301      	movs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 0207 	bic.w	r2, r3, #7
 800231c:	4909      	ldr	r1, [pc, #36]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	40022000 	.word	0x40022000

08002348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002350:	2300      	movs	r3, #0
 8002352:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002354:	2300      	movs	r3, #0
 8002356:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002360:	2b00      	cmp	r3, #0
 8002362:	d02f      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800236c:	d005      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800236e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002372:	d015      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002378:	e00f      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800237a:	4bac      	ldr	r3, [pc, #688]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4aab      	ldr	r2, [pc, #684]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002386:	e00c      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f9cc 	bl	800272c <RCCEx_PLLSAI1_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002398:	e003      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	74fb      	strb	r3, [r7, #19]
      break;
 800239e:	e000      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80023a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a8:	4ba0      	ldr	r3, [pc, #640]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	499d      	ldr	r1, [pc, #628]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023be:	e001      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8099 	beq.w	8002504 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023d6:	4b95      	ldr	r3, [pc, #596]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ec:	4b8f      	ldr	r3, [pc, #572]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	4a8e      	ldr	r2, [pc, #568]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	6593      	str	r3, [r2, #88]	; 0x58
 80023f8:	4b8c      	ldr	r3, [pc, #560]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002404:	2301      	movs	r3, #1
 8002406:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002408:	4b89      	ldr	r3, [pc, #548]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a88      	ldr	r2, [pc, #544]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002414:	f7fe fc46 	bl	8000ca4 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800241a:	e009      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241c:	f7fe fc42 	bl	8000ca4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d902      	bls.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	74fb      	strb	r3, [r7, #19]
        break;
 800242e:	e005      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002430:	4b7f      	ldr	r3, [pc, #508]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ef      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d155      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002442:	4b7a      	ldr	r3, [pc, #488]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01e      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	429a      	cmp	r2, r3
 800245c:	d019      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800245e:	4b73      	ldr	r3, [pc, #460]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002468:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800246a:	4b70      	ldr	r3, [pc, #448]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002470:	4a6e      	ldr	r2, [pc, #440]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800247a:	4b6c      	ldr	r3, [pc, #432]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	4a6a      	ldr	r2, [pc, #424]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800248a:	4a68      	ldr	r2, [pc, #416]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d016      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fc02 	bl	8000ca4 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a2:	e00b      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7fe fbfe 	bl	8000ca4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d902      	bls.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	74fb      	strb	r3, [r7, #19]
            break;
 80024ba:	e006      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024bc:	4b5b      	ldr	r3, [pc, #364]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0ec      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10b      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d0:	4b56      	ldr	r3, [pc, #344]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024de:	4953      	ldr	r1, [pc, #332]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024e6:	e004      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	74bb      	strb	r3, [r7, #18]
 80024ec:	e001      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f2:	7c7b      	ldrb	r3, [r7, #17]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f8:	4b4c      	ldr	r3, [pc, #304]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	4a4b      	ldr	r2, [pc, #300]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002502:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002510:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4943      	ldr	r1, [pc, #268]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002532:	4b3e      	ldr	r3, [pc, #248]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f023 020c 	bic.w	r2, r3, #12
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	493a      	ldr	r1, [pc, #232]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002554:	4b35      	ldr	r3, [pc, #212]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	4932      	ldr	r1, [pc, #200]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002584:	4929      	ldr	r1, [pc, #164]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002598:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	4921      	ldr	r1, [pc, #132]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	4918      	ldr	r1, [pc, #96]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4910      	ldr	r1, [pc, #64]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d02c      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261c:	d10a      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261e:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	4a02      	ldr	r2, [pc, #8]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002628:	60d3      	str	r3, [r2, #12]
 800262a:	e015      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800262c:	40021000 	.word	0x40021000
 8002630:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800263c:	d10c      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3304      	adds	r3, #4
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f871 	bl	800272c <RCCEx_PLLSAI1_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d028      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002664:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	492d      	ldr	r1, [pc, #180]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002682:	d106      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002684:	4b28      	ldr	r3, [pc, #160]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a27      	ldr	r2, [pc, #156]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268e:	60d3      	str	r3, [r2, #12]
 8002690:	e011      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800269a:	d10c      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	2101      	movs	r1, #1
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f842 	bl	800272c <RCCEx_PLLSAI1_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01c      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d0:	4915      	ldr	r1, [pc, #84]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2102      	movs	r1, #2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f81f 	bl	800272c <RCCEx_PLLSAI1_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4904      	ldr	r1, [pc, #16]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800271e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000

0800272c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800273a:	4b73      	ldr	r3, [pc, #460]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d018      	beq.n	8002778 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002746:	4b70      	ldr	r3, [pc, #448]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0203 	and.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d10d      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
       ||
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800275e:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
       ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d044      	beq.n	80027fc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e041      	b.n	80027fc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d00c      	beq.n	800279a <RCCEx_PLLSAI1_Config+0x6e>
 8002780:	2b03      	cmp	r3, #3
 8002782:	d013      	beq.n	80027ac <RCCEx_PLLSAI1_Config+0x80>
 8002784:	2b01      	cmp	r3, #1
 8002786:	d120      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002788:	4b5f      	ldr	r3, [pc, #380]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11d      	bne.n	80027d0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002798:	e01a      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800279a:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027aa:	e013      	b.n	80027d4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ac:	4b56      	ldr	r3, [pc, #344]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027b8:	4b53      	ldr	r3, [pc, #332]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027c8:	e006      	b.n	80027d8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      break;
 80027ce:	e004      	b.n	80027da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80027d0:	bf00      	nop
 80027d2:	e002      	b.n	80027da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80027d4:	bf00      	nop
 80027d6:	e000      	b.n	80027da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80027d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10d      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027e0:	4b49      	ldr	r3, [pc, #292]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	430b      	orrs	r3, r1
 80027f6:	4944      	ldr	r1, [pc, #272]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d17c      	bne.n	80028fc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002802:	4b41      	ldr	r3, [pc, #260]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a40      	ldr	r2, [pc, #256]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800280c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800280e:	f7fe fa49 	bl	8000ca4 <HAL_GetTick>
 8002812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002814:	e009      	b.n	800282a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002816:	f7fe fa45 	bl	8000ca4 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d902      	bls.n	800282a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	73fb      	strb	r3, [r7, #15]
        break;
 8002828:	e005      	b.n	8002836 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1ef      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d15f      	bne.n	80028fc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d110      	bne.n	8002864 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800284a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6892      	ldr	r2, [r2, #8]
 8002852:	0211      	lsls	r1, r2, #8
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68d2      	ldr	r2, [r2, #12]
 8002858:	06d2      	lsls	r2, r2, #27
 800285a:	430a      	orrs	r2, r1
 800285c:	492a      	ldr	r1, [pc, #168]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	610b      	str	r3, [r1, #16]
 8002862:	e027      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d112      	bne.n	8002890 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002872:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6892      	ldr	r2, [r2, #8]
 800287a:	0211      	lsls	r1, r2, #8
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6912      	ldr	r2, [r2, #16]
 8002880:	0852      	lsrs	r2, r2, #1
 8002882:	3a01      	subs	r2, #1
 8002884:	0552      	lsls	r2, r2, #21
 8002886:	430a      	orrs	r2, r1
 8002888:	491f      	ldr	r1, [pc, #124]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	610b      	str	r3, [r1, #16]
 800288e:	e011      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6892      	ldr	r2, [r2, #8]
 80028a0:	0211      	lsls	r1, r2, #8
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6952      	ldr	r2, [r2, #20]
 80028a6:	0852      	lsrs	r2, r2, #1
 80028a8:	3a01      	subs	r2, #1
 80028aa:	0652      	lsls	r2, r2, #25
 80028ac:	430a      	orrs	r2, r1
 80028ae:	4916      	ldr	r1, [pc, #88]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a13      	ldr	r2, [pc, #76]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe f9f0 	bl	8000ca4 <HAL_GetTick>
 80028c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028c6:	e009      	b.n	80028dc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c8:	f7fe f9ec 	bl	8000ca4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d902      	bls.n	80028dc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	73fb      	strb	r3, [r7, #15]
          break;
 80028da:	e005      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ef      	beq.n	80028c8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	4904      	ldr	r1, [pc, #16]	; (8002908 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000

0800290c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e040      	b.n	80029a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fd ffd8 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2224      	movs	r2, #36	; 0x24
 8002938:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f8c0 	bl	8002ad0 <UART_SetConfig>
 8002950:	4603      	mov	r3, r0
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e022      	b.n	80029a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fb9a 	bl	800309c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fc21 	bl	80031e0 <UART_CheckIdleState>
 800299e:	4603      	mov	r3, r0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	2b20      	cmp	r3, #32
 80029be:	f040 8081 	bne.w	8002ac4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <HAL_UART_Transmit+0x26>
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e079      	b.n	8002ac6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_UART_Transmit+0x38>
 80029dc:	2302      	movs	r3, #2
 80029de:	e072      	b.n	8002ac6 <HAL_UART_Transmit+0x11e>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2221      	movs	r2, #33	; 0x21
 80029f2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029f4:	f7fe f956 	bl	8000ca4 <HAL_GetTick>
 80029f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	88fa      	ldrh	r2, [r7, #6]
 8002a06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a12:	d108      	bne.n	8002a26 <HAL_UART_Transmit+0x7e>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d104      	bne.n	8002a26 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	e003      	b.n	8002a2e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002a36:	e02d      	b.n	8002a94 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fc11 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e039      	b.n	8002ac6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	881a      	ldrh	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a64:	b292      	uxth	r2, r2
 8002a66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	e008      	b.n	8002a82 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b292      	uxth	r2, r2
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1cb      	bne.n	8002a38 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2140      	movs	r1, #64	; 0x40
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fbdd 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e005      	b.n	8002ac6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002ad4:	b08a      	sub	sp, #40	; 0x28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4bb3      	ldr	r3, [pc, #716]	; (8002dd4 <UART_SetConfig+0x304>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4aa9      	ldr	r2, [pc, #676]	; (8002dd8 <UART_SetConfig+0x308>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4aa0      	ldr	r2, [pc, #640]	; (8002ddc <UART_SetConfig+0x30c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d126      	bne.n	8002bae <UART_SetConfig+0xde>
 8002b60:	4b9f      	ldr	r3, [pc, #636]	; (8002de0 <UART_SetConfig+0x310>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d81a      	bhi.n	8002ba4 <UART_SetConfig+0xd4>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <UART_SetConfig+0xa4>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	08002b95 	.word	0x08002b95
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002b9d 	.word	0x08002b9d
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b8a:	e080      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b92:	e07c      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002b94:	2304      	movs	r3, #4
 8002b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b9a:	e078      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ba2:	e074      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002baa:	bf00      	nop
 8002bac:	e06f      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a8c      	ldr	r2, [pc, #560]	; (8002de4 <UART_SetConfig+0x314>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d138      	bne.n	8002c2a <UART_SetConfig+0x15a>
 8002bb8:	4b89      	ldr	r3, [pc, #548]	; (8002de0 <UART_SetConfig+0x310>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b0c      	cmp	r3, #12
 8002bc4:	d82c      	bhi.n	8002c20 <UART_SetConfig+0x150>
 8002bc6:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <UART_SetConfig+0xfc>)
 8002bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bcc:	08002c01 	.word	0x08002c01
 8002bd0:	08002c21 	.word	0x08002c21
 8002bd4:	08002c21 	.word	0x08002c21
 8002bd8:	08002c21 	.word	0x08002c21
 8002bdc:	08002c11 	.word	0x08002c11
 8002be0:	08002c21 	.word	0x08002c21
 8002be4:	08002c21 	.word	0x08002c21
 8002be8:	08002c21 	.word	0x08002c21
 8002bec:	08002c09 	.word	0x08002c09
 8002bf0:	08002c21 	.word	0x08002c21
 8002bf4:	08002c21 	.word	0x08002c21
 8002bf8:	08002c21 	.word	0x08002c21
 8002bfc:	08002c19 	.word	0x08002c19
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c06:	e042      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c0e:	e03e      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002c10:	2304      	movs	r3, #4
 8002c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c16:	e03a      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002c18:	2308      	movs	r3, #8
 8002c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c1e:	e036      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002c20:	2310      	movs	r3, #16
 8002c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c26:	bf00      	nop
 8002c28:	e031      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6a      	ldr	r2, [pc, #424]	; (8002dd8 <UART_SetConfig+0x308>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d129      	bne.n	8002c88 <UART_SetConfig+0x1b8>
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <UART_SetConfig+0x310>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c42:	d014      	beq.n	8002c6e <UART_SetConfig+0x19e>
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d802      	bhi.n	8002c50 <UART_SetConfig+0x180>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <UART_SetConfig+0x18e>
 8002c4e:	e016      	b.n	8002c7e <UART_SetConfig+0x1ae>
 8002c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c54:	d007      	beq.n	8002c66 <UART_SetConfig+0x196>
 8002c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c5a:	d00c      	beq.n	8002c76 <UART_SetConfig+0x1a6>
 8002c5c:	e00f      	b.n	8002c7e <UART_SetConfig+0x1ae>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c64:	e013      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002c66:	2302      	movs	r3, #2
 8002c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c6c:	e00f      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c74:	e00b      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002c76:	2308      	movs	r3, #8
 8002c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7c:	e007      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002c7e:	2310      	movs	r3, #16
 8002c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c84:	bf00      	nop
 8002c86:	e002      	b.n	8002c8e <UART_SetConfig+0x1be>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a51      	ldr	r2, [pc, #324]	; (8002dd8 <UART_SetConfig+0x308>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	f040 80fa 	bne.w	8002e8e <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d823      	bhi.n	8002cea <UART_SetConfig+0x21a>
 8002ca2:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <UART_SetConfig+0x1d8>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002ccd 	.word	0x08002ccd
 8002cac:	08002ceb 	.word	0x08002ceb
 8002cb0:	08002cd5 	.word	0x08002cd5
 8002cb4:	08002ceb 	.word	0x08002ceb
 8002cb8:	08002cdb 	.word	0x08002cdb
 8002cbc:	08002ceb 	.word	0x08002ceb
 8002cc0:	08002ceb 	.word	0x08002ceb
 8002cc4:	08002ceb 	.word	0x08002ceb
 8002cc8:	08002ce3 	.word	0x08002ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002ccc:	f7ff fab0 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8002cd0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cd2:	e00d      	b.n	8002cf0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002cd4:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <UART_SetConfig+0x318>)
 8002cd6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cd8:	e00a      	b.n	8002cf0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002cda:	f7ff fa13 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8002cde:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ce0:	e006      	b.n	8002cf0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ce8:	e002      	b.n	8002cf0 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	76fb      	strb	r3, [r7, #27]
        break;
 8002cee:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 81c6 	beq.w	8003084 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d305      	bcc.n	8002d14 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d902      	bls.n	8002d1a <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	76fb      	strb	r3, [r7, #27]
 8002d18:	e1b4      	b.n	8003084 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 8002d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	f200 80a2 	bhi.w	8002e68 <UART_SetConfig+0x398>
 8002d24:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <UART_SetConfig+0x25c>)
 8002d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2a:	bf00      	nop
 8002d2c:	08002d51 	.word	0x08002d51
 8002d30:	08002e69 	.word	0x08002e69
 8002d34:	08002d9f 	.word	0x08002d9f
 8002d38:	08002e69 	.word	0x08002e69
 8002d3c:	08002df1 	.word	0x08002df1
 8002d40:	08002e69 	.word	0x08002e69
 8002d44:	08002e69 	.word	0x08002e69
 8002d48:	08002e69 	.word	0x08002e69
 8002d4c:	08002e3f 	.word	0x08002e3f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002d50:	f7ff fa6e 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8002d54:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	f04f 0400 	mov.w	r4, #0
 8002d66:	0214      	lsls	r4, r2, #8
 8002d68:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002d6c:	020b      	lsls	r3, r1, #8
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6852      	ldr	r2, [r2, #4]
 8002d72:	0852      	lsrs	r2, r2, #1
 8002d74:	4611      	mov	r1, r2
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	eb13 0b01 	adds.w	fp, r3, r1
 8002d7e:	eb44 0c02 	adc.w	ip, r4, r2
 8002d82:	4658      	mov	r0, fp
 8002d84:	4661      	mov	r1, ip
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f04f 0400 	mov.w	r4, #0
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4623      	mov	r3, r4
 8002d92:	f7fd fa6d 	bl	8000270 <__aeabi_uldivmod>
 8002d96:	4603      	mov	r3, r0
 8002d98:	460c      	mov	r4, r1
 8002d9a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002d9c:	e067      	b.n	8002e6e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	f04f 0400 	mov.w	r4, #0
 8002da8:	4910      	ldr	r1, [pc, #64]	; (8002dec <UART_SetConfig+0x31c>)
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	eb13 0b01 	adds.w	fp, r3, r1
 8002db2:	eb44 0c02 	adc.w	ip, r4, r2
 8002db6:	4658      	mov	r0, fp
 8002db8:	4661      	mov	r1, ip
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f04f 0400 	mov.w	r4, #0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4623      	mov	r3, r4
 8002dc6:	f7fd fa53 	bl	8000270 <__aeabi_uldivmod>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002dd0:	e04d      	b.n	8002e6e <UART_SetConfig+0x39e>
 8002dd2:	bf00      	nop
 8002dd4:	efff69f3 	.word	0xefff69f3
 8002dd8:	40008000 	.word	0x40008000
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40004400 	.word	0x40004400
 8002de8:	00f42400 	.word	0x00f42400
 8002dec:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002df0:	f7ff f988 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8002df4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f04f 0400 	mov.w	r4, #0
 8002e06:	0214      	lsls	r4, r2, #8
 8002e08:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002e0c:	020b      	lsls	r3, r1, #8
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6852      	ldr	r2, [r2, #4]
 8002e12:	0852      	lsrs	r2, r2, #1
 8002e14:	4611      	mov	r1, r2
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	eb13 0b01 	adds.w	fp, r3, r1
 8002e1e:	eb44 0c02 	adc.w	ip, r4, r2
 8002e22:	4658      	mov	r0, fp
 8002e24:	4661      	mov	r1, ip
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f04f 0400 	mov.w	r4, #0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4623      	mov	r3, r4
 8002e32:	f7fd fa1d 	bl	8000270 <__aeabi_uldivmod>
 8002e36:	4603      	mov	r3, r0
 8002e38:	460c      	mov	r4, r1
 8002e3a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002e3c:	e017      	b.n	8002e6e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	f04f 0400 	mov.w	r4, #0
 8002e48:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002e4c:	f144 0100 	adc.w	r1, r4, #0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f04f 0400 	mov.w	r4, #0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	f7fd fa08 	bl	8000270 <__aeabi_uldivmod>
 8002e60:	4603      	mov	r3, r0
 8002e62:	460c      	mov	r4, r1
 8002e64:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002e66:	e002      	b.n	8002e6e <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	76fb      	strb	r3, [r7, #27]
            break;
 8002e6c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e74:	d308      	bcc.n	8002e88 <UART_SetConfig+0x3b8>
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7c:	d204      	bcs.n	8002e88 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	e0fd      	b.n	8003084 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	76fb      	strb	r3, [r7, #27]
 8002e8c:	e0fa      	b.n	8003084 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e96:	f040 8083 	bne.w	8002fa0 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8002e9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d85e      	bhi.n	8002f60 <UART_SetConfig+0x490>
 8002ea2:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <UART_SetConfig+0x3d8>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002ecd 	.word	0x08002ecd
 8002eac:	08002eed 	.word	0x08002eed
 8002eb0:	08002f0d 	.word	0x08002f0d
 8002eb4:	08002f61 	.word	0x08002f61
 8002eb8:	08002f29 	.word	0x08002f29
 8002ebc:	08002f61 	.word	0x08002f61
 8002ec0:	08002f61 	.word	0x08002f61
 8002ec4:	08002f61 	.word	0x08002f61
 8002ec8:	08002f49 	.word	0x08002f49
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ecc:	f7ff f9b0 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8002ed0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	005a      	lsls	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	441a      	add	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002eea:	e03c      	b.n	8002f66 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eec:	f7ff f9b6 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002ef0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	005a      	lsls	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f0a:	e02c      	b.n	8002f66 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002f16:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6852      	ldr	r2, [r2, #4]
 8002f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f26:	e01e      	b.n	8002f66 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f28:	f7ff f8ec 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8002f2c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	005a      	lsls	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	441a      	add	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f46:	e00e      	b.n	8002f66 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	085b      	lsrs	r3, r3, #1
 8002f4e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f5e:	e002      	b.n	8002f66 <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	76fb      	strb	r3, [r7, #27]
        break;
 8002f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d916      	bls.n	8002f9a <UART_SetConfig+0x4ca>
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f72:	d212      	bcs.n	8002f9a <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f023 030f 	bic.w	r3, r3, #15
 8002f7c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	085b      	lsrs	r3, r3, #1
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	89fb      	ldrh	r3, [r7, #14]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	89fa      	ldrh	r2, [r7, #14]
 8002f96:	60da      	str	r2, [r3, #12]
 8002f98:	e074      	b.n	8003084 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	76fb      	strb	r3, [r7, #27]
 8002f9e:	e071      	b.n	8003084 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8002fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d85c      	bhi.n	8003062 <UART_SetConfig+0x592>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x4e0>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fd5 	.word	0x08002fd5
 8002fb4:	08002ff3 	.word	0x08002ff3
 8002fb8:	08003011 	.word	0x08003011
 8002fbc:	08003063 	.word	0x08003063
 8002fc0:	0800302d 	.word	0x0800302d
 8002fc4:	08003063 	.word	0x08003063
 8002fc8:	08003063 	.word	0x08003063
 8002fcc:	08003063 	.word	0x08003063
 8002fd0:	0800304b 	.word	0x0800304b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7ff f92c 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8002fd8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	085a      	lsrs	r2, r3, #1
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	441a      	add	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ff0:	e03a      	b.n	8003068 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff2:	f7ff f933 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002ff6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	085a      	lsrs	r2, r3, #1
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	441a      	add	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800300e:	e02b      	b.n	8003068 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800301a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6852      	ldr	r2, [r2, #4]
 8003022:	fbb3 f3f2 	udiv	r3, r3, r2
 8003026:	b29b      	uxth	r3, r3
 8003028:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800302a:	e01d      	b.n	8003068 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800302c:	f7ff f86a 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8003030:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	085a      	lsrs	r2, r3, #1
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	441a      	add	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	b29b      	uxth	r3, r3
 8003046:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003048:	e00e      	b.n	8003068 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	b29b      	uxth	r3, r3
 800305e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003060:	e002      	b.n	8003068 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	76fb      	strb	r3, [r7, #27]
        break;
 8003066:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b0f      	cmp	r3, #15
 800306c:	d908      	bls.n	8003080 <UART_SetConfig+0x5b0>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003074:	d204      	bcs.n	8003080 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	e001      	b.n	8003084 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003090:	7efb      	ldrb	r3, [r7, #27]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3728      	adds	r7, #40	; 0x28
 8003096:	46bd      	mov	sp, r7
 8003098:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800309c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01a      	beq.n	80031b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800319a:	d10a      	bne.n	80031b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
  }
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80031ee:	f7fd fd59 	bl	8000ca4 <HAL_GetTick>
 80031f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d10e      	bne.n	8003220 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003202:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f82a 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e020      	b.n	8003262 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d10e      	bne.n	800324c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800322e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f814 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e00a      	b.n	8003262 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327a:	e05d      	b.n	8003338 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003282:	d059      	beq.n	8003338 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003284:	f7fd fd0e 	bl	8000ca4 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	429a      	cmp	r2, r3
 8003292:	d302      	bcc.n	800329a <UART_WaitOnFlagUntilTimeout+0x30>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11b      	bne.n	80032d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e042      	b.n	8003358 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d02b      	beq.n	8003338 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ee:	d123      	bne.n	8003338 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032f8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003308:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e00f      	b.n	8003358 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4013      	ands	r3, r2
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	429a      	cmp	r2, r3
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	429a      	cmp	r2, r3
 8003354:	d092      	beq.n	800327c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <__errno>:
 8003360:	4b01      	ldr	r3, [pc, #4]	; (8003368 <__errno+0x8>)
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	2000000c 	.word	0x2000000c

0800336c <__libc_init_array>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	4e0d      	ldr	r6, [pc, #52]	; (80033a4 <__libc_init_array+0x38>)
 8003370:	4c0d      	ldr	r4, [pc, #52]	; (80033a8 <__libc_init_array+0x3c>)
 8003372:	1ba4      	subs	r4, r4, r6
 8003374:	10a4      	asrs	r4, r4, #2
 8003376:	2500      	movs	r5, #0
 8003378:	42a5      	cmp	r5, r4
 800337a:	d109      	bne.n	8003390 <__libc_init_array+0x24>
 800337c:	4e0b      	ldr	r6, [pc, #44]	; (80033ac <__libc_init_array+0x40>)
 800337e:	4c0c      	ldr	r4, [pc, #48]	; (80033b0 <__libc_init_array+0x44>)
 8003380:	f000 ffb2 	bl	80042e8 <_init>
 8003384:	1ba4      	subs	r4, r4, r6
 8003386:	10a4      	asrs	r4, r4, #2
 8003388:	2500      	movs	r5, #0
 800338a:	42a5      	cmp	r5, r4
 800338c:	d105      	bne.n	800339a <__libc_init_array+0x2e>
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003394:	4798      	blx	r3
 8003396:	3501      	adds	r5, #1
 8003398:	e7ee      	b.n	8003378 <__libc_init_array+0xc>
 800339a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800339e:	4798      	blx	r3
 80033a0:	3501      	adds	r5, #1
 80033a2:	e7f2      	b.n	800338a <__libc_init_array+0x1e>
 80033a4:	0800440c 	.word	0x0800440c
 80033a8:	0800440c 	.word	0x0800440c
 80033ac:	0800440c 	.word	0x0800440c
 80033b0:	08004410 	.word	0x08004410

080033b4 <memset>:
 80033b4:	4402      	add	r2, r0
 80033b6:	4603      	mov	r3, r0
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d100      	bne.n	80033be <memset+0xa>
 80033bc:	4770      	bx	lr
 80033be:	f803 1b01 	strb.w	r1, [r3], #1
 80033c2:	e7f9      	b.n	80033b8 <memset+0x4>

080033c4 <iprintf>:
 80033c4:	b40f      	push	{r0, r1, r2, r3}
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <iprintf+0x2c>)
 80033c8:	b513      	push	{r0, r1, r4, lr}
 80033ca:	681c      	ldr	r4, [r3, #0]
 80033cc:	b124      	cbz	r4, 80033d8 <iprintf+0x14>
 80033ce:	69a3      	ldr	r3, [r4, #24]
 80033d0:	b913      	cbnz	r3, 80033d8 <iprintf+0x14>
 80033d2:	4620      	mov	r0, r4
 80033d4:	f000 fa36 	bl	8003844 <__sinit>
 80033d8:	ab05      	add	r3, sp, #20
 80033da:	9a04      	ldr	r2, [sp, #16]
 80033dc:	68a1      	ldr	r1, [r4, #8]
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	4620      	mov	r0, r4
 80033e2:	f000 fbef 	bl	8003bc4 <_vfiprintf_r>
 80033e6:	b002      	add	sp, #8
 80033e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033ec:	b004      	add	sp, #16
 80033ee:	4770      	bx	lr
 80033f0:	2000000c 	.word	0x2000000c

080033f4 <putchar>:
 80033f4:	b538      	push	{r3, r4, r5, lr}
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <putchar+0x24>)
 80033f8:	681c      	ldr	r4, [r3, #0]
 80033fa:	4605      	mov	r5, r0
 80033fc:	b124      	cbz	r4, 8003408 <putchar+0x14>
 80033fe:	69a3      	ldr	r3, [r4, #24]
 8003400:	b913      	cbnz	r3, 8003408 <putchar+0x14>
 8003402:	4620      	mov	r0, r4
 8003404:	f000 fa1e 	bl	8003844 <__sinit>
 8003408:	68a2      	ldr	r2, [r4, #8]
 800340a:	4629      	mov	r1, r5
 800340c:	4620      	mov	r0, r4
 800340e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003412:	f000 be75 	b.w	8004100 <_putc_r>
 8003416:	bf00      	nop
 8003418:	2000000c 	.word	0x2000000c

0800341c <_puts_r>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	460e      	mov	r6, r1
 8003420:	4605      	mov	r5, r0
 8003422:	b118      	cbz	r0, 800342c <_puts_r+0x10>
 8003424:	6983      	ldr	r3, [r0, #24]
 8003426:	b90b      	cbnz	r3, 800342c <_puts_r+0x10>
 8003428:	f000 fa0c 	bl	8003844 <__sinit>
 800342c:	69ab      	ldr	r3, [r5, #24]
 800342e:	68ac      	ldr	r4, [r5, #8]
 8003430:	b913      	cbnz	r3, 8003438 <_puts_r+0x1c>
 8003432:	4628      	mov	r0, r5
 8003434:	f000 fa06 	bl	8003844 <__sinit>
 8003438:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <_puts_r+0xac>)
 800343a:	429c      	cmp	r4, r3
 800343c:	d117      	bne.n	800346e <_puts_r+0x52>
 800343e:	686c      	ldr	r4, [r5, #4]
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	071b      	lsls	r3, r3, #28
 8003444:	d51d      	bpl.n	8003482 <_puts_r+0x66>
 8003446:	6923      	ldr	r3, [r4, #16]
 8003448:	b1db      	cbz	r3, 8003482 <_puts_r+0x66>
 800344a:	3e01      	subs	r6, #1
 800344c:	68a3      	ldr	r3, [r4, #8]
 800344e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003452:	3b01      	subs	r3, #1
 8003454:	60a3      	str	r3, [r4, #8]
 8003456:	b9e9      	cbnz	r1, 8003494 <_puts_r+0x78>
 8003458:	2b00      	cmp	r3, #0
 800345a:	da2e      	bge.n	80034ba <_puts_r+0x9e>
 800345c:	4622      	mov	r2, r4
 800345e:	210a      	movs	r1, #10
 8003460:	4628      	mov	r0, r5
 8003462:	f000 f83f 	bl	80034e4 <__swbuf_r>
 8003466:	3001      	adds	r0, #1
 8003468:	d011      	beq.n	800348e <_puts_r+0x72>
 800346a:	200a      	movs	r0, #10
 800346c:	e011      	b.n	8003492 <_puts_r+0x76>
 800346e:	4b17      	ldr	r3, [pc, #92]	; (80034cc <_puts_r+0xb0>)
 8003470:	429c      	cmp	r4, r3
 8003472:	d101      	bne.n	8003478 <_puts_r+0x5c>
 8003474:	68ac      	ldr	r4, [r5, #8]
 8003476:	e7e3      	b.n	8003440 <_puts_r+0x24>
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <_puts_r+0xb4>)
 800347a:	429c      	cmp	r4, r3
 800347c:	bf08      	it	eq
 800347e:	68ec      	ldreq	r4, [r5, #12]
 8003480:	e7de      	b.n	8003440 <_puts_r+0x24>
 8003482:	4621      	mov	r1, r4
 8003484:	4628      	mov	r0, r5
 8003486:	f000 f87f 	bl	8003588 <__swsetup_r>
 800348a:	2800      	cmp	r0, #0
 800348c:	d0dd      	beq.n	800344a <_puts_r+0x2e>
 800348e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	2b00      	cmp	r3, #0
 8003496:	da04      	bge.n	80034a2 <_puts_r+0x86>
 8003498:	69a2      	ldr	r2, [r4, #24]
 800349a:	429a      	cmp	r2, r3
 800349c:	dc06      	bgt.n	80034ac <_puts_r+0x90>
 800349e:	290a      	cmp	r1, #10
 80034a0:	d004      	beq.n	80034ac <_puts_r+0x90>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	6022      	str	r2, [r4, #0]
 80034a8:	7019      	strb	r1, [r3, #0]
 80034aa:	e7cf      	b.n	800344c <_puts_r+0x30>
 80034ac:	4622      	mov	r2, r4
 80034ae:	4628      	mov	r0, r5
 80034b0:	f000 f818 	bl	80034e4 <__swbuf_r>
 80034b4:	3001      	adds	r0, #1
 80034b6:	d1c9      	bne.n	800344c <_puts_r+0x30>
 80034b8:	e7e9      	b.n	800348e <_puts_r+0x72>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	200a      	movs	r0, #10
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	6022      	str	r2, [r4, #0]
 80034c2:	7018      	strb	r0, [r3, #0]
 80034c4:	e7e5      	b.n	8003492 <_puts_r+0x76>
 80034c6:	bf00      	nop
 80034c8:	08004390 	.word	0x08004390
 80034cc:	080043b0 	.word	0x080043b0
 80034d0:	08004370 	.word	0x08004370

080034d4 <puts>:
 80034d4:	4b02      	ldr	r3, [pc, #8]	; (80034e0 <puts+0xc>)
 80034d6:	4601      	mov	r1, r0
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	f7ff bf9f 	b.w	800341c <_puts_r>
 80034de:	bf00      	nop
 80034e0:	2000000c 	.word	0x2000000c

080034e4 <__swbuf_r>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	460e      	mov	r6, r1
 80034e8:	4614      	mov	r4, r2
 80034ea:	4605      	mov	r5, r0
 80034ec:	b118      	cbz	r0, 80034f6 <__swbuf_r+0x12>
 80034ee:	6983      	ldr	r3, [r0, #24]
 80034f0:	b90b      	cbnz	r3, 80034f6 <__swbuf_r+0x12>
 80034f2:	f000 f9a7 	bl	8003844 <__sinit>
 80034f6:	4b21      	ldr	r3, [pc, #132]	; (800357c <__swbuf_r+0x98>)
 80034f8:	429c      	cmp	r4, r3
 80034fa:	d12a      	bne.n	8003552 <__swbuf_r+0x6e>
 80034fc:	686c      	ldr	r4, [r5, #4]
 80034fe:	69a3      	ldr	r3, [r4, #24]
 8003500:	60a3      	str	r3, [r4, #8]
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	071a      	lsls	r2, r3, #28
 8003506:	d52e      	bpl.n	8003566 <__swbuf_r+0x82>
 8003508:	6923      	ldr	r3, [r4, #16]
 800350a:	b363      	cbz	r3, 8003566 <__swbuf_r+0x82>
 800350c:	6923      	ldr	r3, [r4, #16]
 800350e:	6820      	ldr	r0, [r4, #0]
 8003510:	1ac0      	subs	r0, r0, r3
 8003512:	6963      	ldr	r3, [r4, #20]
 8003514:	b2f6      	uxtb	r6, r6
 8003516:	4283      	cmp	r3, r0
 8003518:	4637      	mov	r7, r6
 800351a:	dc04      	bgt.n	8003526 <__swbuf_r+0x42>
 800351c:	4621      	mov	r1, r4
 800351e:	4628      	mov	r0, r5
 8003520:	f000 f926 	bl	8003770 <_fflush_r>
 8003524:	bb28      	cbnz	r0, 8003572 <__swbuf_r+0x8e>
 8003526:	68a3      	ldr	r3, [r4, #8]
 8003528:	3b01      	subs	r3, #1
 800352a:	60a3      	str	r3, [r4, #8]
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	6022      	str	r2, [r4, #0]
 8003532:	701e      	strb	r6, [r3, #0]
 8003534:	6963      	ldr	r3, [r4, #20]
 8003536:	3001      	adds	r0, #1
 8003538:	4283      	cmp	r3, r0
 800353a:	d004      	beq.n	8003546 <__swbuf_r+0x62>
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	07db      	lsls	r3, r3, #31
 8003540:	d519      	bpl.n	8003576 <__swbuf_r+0x92>
 8003542:	2e0a      	cmp	r6, #10
 8003544:	d117      	bne.n	8003576 <__swbuf_r+0x92>
 8003546:	4621      	mov	r1, r4
 8003548:	4628      	mov	r0, r5
 800354a:	f000 f911 	bl	8003770 <_fflush_r>
 800354e:	b190      	cbz	r0, 8003576 <__swbuf_r+0x92>
 8003550:	e00f      	b.n	8003572 <__swbuf_r+0x8e>
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <__swbuf_r+0x9c>)
 8003554:	429c      	cmp	r4, r3
 8003556:	d101      	bne.n	800355c <__swbuf_r+0x78>
 8003558:	68ac      	ldr	r4, [r5, #8]
 800355a:	e7d0      	b.n	80034fe <__swbuf_r+0x1a>
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <__swbuf_r+0xa0>)
 800355e:	429c      	cmp	r4, r3
 8003560:	bf08      	it	eq
 8003562:	68ec      	ldreq	r4, [r5, #12]
 8003564:	e7cb      	b.n	80034fe <__swbuf_r+0x1a>
 8003566:	4621      	mov	r1, r4
 8003568:	4628      	mov	r0, r5
 800356a:	f000 f80d 	bl	8003588 <__swsetup_r>
 800356e:	2800      	cmp	r0, #0
 8003570:	d0cc      	beq.n	800350c <__swbuf_r+0x28>
 8003572:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003576:	4638      	mov	r0, r7
 8003578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800357a:	bf00      	nop
 800357c:	08004390 	.word	0x08004390
 8003580:	080043b0 	.word	0x080043b0
 8003584:	08004370 	.word	0x08004370

08003588 <__swsetup_r>:
 8003588:	4b32      	ldr	r3, [pc, #200]	; (8003654 <__swsetup_r+0xcc>)
 800358a:	b570      	push	{r4, r5, r6, lr}
 800358c:	681d      	ldr	r5, [r3, #0]
 800358e:	4606      	mov	r6, r0
 8003590:	460c      	mov	r4, r1
 8003592:	b125      	cbz	r5, 800359e <__swsetup_r+0x16>
 8003594:	69ab      	ldr	r3, [r5, #24]
 8003596:	b913      	cbnz	r3, 800359e <__swsetup_r+0x16>
 8003598:	4628      	mov	r0, r5
 800359a:	f000 f953 	bl	8003844 <__sinit>
 800359e:	4b2e      	ldr	r3, [pc, #184]	; (8003658 <__swsetup_r+0xd0>)
 80035a0:	429c      	cmp	r4, r3
 80035a2:	d10f      	bne.n	80035c4 <__swsetup_r+0x3c>
 80035a4:	686c      	ldr	r4, [r5, #4]
 80035a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	0715      	lsls	r5, r2, #28
 80035ae:	d42c      	bmi.n	800360a <__swsetup_r+0x82>
 80035b0:	06d0      	lsls	r0, r2, #27
 80035b2:	d411      	bmi.n	80035d8 <__swsetup_r+0x50>
 80035b4:	2209      	movs	r2, #9
 80035b6:	6032      	str	r2, [r6, #0]
 80035b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035bc:	81a3      	strh	r3, [r4, #12]
 80035be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035c2:	e03e      	b.n	8003642 <__swsetup_r+0xba>
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <__swsetup_r+0xd4>)
 80035c6:	429c      	cmp	r4, r3
 80035c8:	d101      	bne.n	80035ce <__swsetup_r+0x46>
 80035ca:	68ac      	ldr	r4, [r5, #8]
 80035cc:	e7eb      	b.n	80035a6 <__swsetup_r+0x1e>
 80035ce:	4b24      	ldr	r3, [pc, #144]	; (8003660 <__swsetup_r+0xd8>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	bf08      	it	eq
 80035d4:	68ec      	ldreq	r4, [r5, #12]
 80035d6:	e7e6      	b.n	80035a6 <__swsetup_r+0x1e>
 80035d8:	0751      	lsls	r1, r2, #29
 80035da:	d512      	bpl.n	8003602 <__swsetup_r+0x7a>
 80035dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035de:	b141      	cbz	r1, 80035f2 <__swsetup_r+0x6a>
 80035e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035e4:	4299      	cmp	r1, r3
 80035e6:	d002      	beq.n	80035ee <__swsetup_r+0x66>
 80035e8:	4630      	mov	r0, r6
 80035ea:	f000 fa19 	bl	8003a20 <_free_r>
 80035ee:	2300      	movs	r3, #0
 80035f0:	6363      	str	r3, [r4, #52]	; 0x34
 80035f2:	89a3      	ldrh	r3, [r4, #12]
 80035f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035f8:	81a3      	strh	r3, [r4, #12]
 80035fa:	2300      	movs	r3, #0
 80035fc:	6063      	str	r3, [r4, #4]
 80035fe:	6923      	ldr	r3, [r4, #16]
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	f043 0308 	orr.w	r3, r3, #8
 8003608:	81a3      	strh	r3, [r4, #12]
 800360a:	6923      	ldr	r3, [r4, #16]
 800360c:	b94b      	cbnz	r3, 8003622 <__swsetup_r+0x9a>
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003618:	d003      	beq.n	8003622 <__swsetup_r+0x9a>
 800361a:	4621      	mov	r1, r4
 800361c:	4630      	mov	r0, r6
 800361e:	f000 f9bf 	bl	80039a0 <__smakebuf_r>
 8003622:	89a2      	ldrh	r2, [r4, #12]
 8003624:	f012 0301 	ands.w	r3, r2, #1
 8003628:	d00c      	beq.n	8003644 <__swsetup_r+0xbc>
 800362a:	2300      	movs	r3, #0
 800362c:	60a3      	str	r3, [r4, #8]
 800362e:	6963      	ldr	r3, [r4, #20]
 8003630:	425b      	negs	r3, r3
 8003632:	61a3      	str	r3, [r4, #24]
 8003634:	6923      	ldr	r3, [r4, #16]
 8003636:	b953      	cbnz	r3, 800364e <__swsetup_r+0xc6>
 8003638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800363c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003640:	d1ba      	bne.n	80035b8 <__swsetup_r+0x30>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	0792      	lsls	r2, r2, #30
 8003646:	bf58      	it	pl
 8003648:	6963      	ldrpl	r3, [r4, #20]
 800364a:	60a3      	str	r3, [r4, #8]
 800364c:	e7f2      	b.n	8003634 <__swsetup_r+0xac>
 800364e:	2000      	movs	r0, #0
 8003650:	e7f7      	b.n	8003642 <__swsetup_r+0xba>
 8003652:	bf00      	nop
 8003654:	2000000c 	.word	0x2000000c
 8003658:	08004390 	.word	0x08004390
 800365c:	080043b0 	.word	0x080043b0
 8003660:	08004370 	.word	0x08004370

08003664 <__sflush_r>:
 8003664:	898a      	ldrh	r2, [r1, #12]
 8003666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800366a:	4605      	mov	r5, r0
 800366c:	0710      	lsls	r0, r2, #28
 800366e:	460c      	mov	r4, r1
 8003670:	d458      	bmi.n	8003724 <__sflush_r+0xc0>
 8003672:	684b      	ldr	r3, [r1, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	dc05      	bgt.n	8003684 <__sflush_r+0x20>
 8003678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	dc02      	bgt.n	8003684 <__sflush_r+0x20>
 800367e:	2000      	movs	r0, #0
 8003680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003686:	2e00      	cmp	r6, #0
 8003688:	d0f9      	beq.n	800367e <__sflush_r+0x1a>
 800368a:	2300      	movs	r3, #0
 800368c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003690:	682f      	ldr	r7, [r5, #0]
 8003692:	6a21      	ldr	r1, [r4, #32]
 8003694:	602b      	str	r3, [r5, #0]
 8003696:	d032      	beq.n	80036fe <__sflush_r+0x9a>
 8003698:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	075a      	lsls	r2, r3, #29
 800369e:	d505      	bpl.n	80036ac <__sflush_r+0x48>
 80036a0:	6863      	ldr	r3, [r4, #4]
 80036a2:	1ac0      	subs	r0, r0, r3
 80036a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036a6:	b10b      	cbz	r3, 80036ac <__sflush_r+0x48>
 80036a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036aa:	1ac0      	subs	r0, r0, r3
 80036ac:	2300      	movs	r3, #0
 80036ae:	4602      	mov	r2, r0
 80036b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036b2:	6a21      	ldr	r1, [r4, #32]
 80036b4:	4628      	mov	r0, r5
 80036b6:	47b0      	blx	r6
 80036b8:	1c43      	adds	r3, r0, #1
 80036ba:	89a3      	ldrh	r3, [r4, #12]
 80036bc:	d106      	bne.n	80036cc <__sflush_r+0x68>
 80036be:	6829      	ldr	r1, [r5, #0]
 80036c0:	291d      	cmp	r1, #29
 80036c2:	d848      	bhi.n	8003756 <__sflush_r+0xf2>
 80036c4:	4a29      	ldr	r2, [pc, #164]	; (800376c <__sflush_r+0x108>)
 80036c6:	40ca      	lsrs	r2, r1
 80036c8:	07d6      	lsls	r6, r2, #31
 80036ca:	d544      	bpl.n	8003756 <__sflush_r+0xf2>
 80036cc:	2200      	movs	r2, #0
 80036ce:	6062      	str	r2, [r4, #4]
 80036d0:	04d9      	lsls	r1, r3, #19
 80036d2:	6922      	ldr	r2, [r4, #16]
 80036d4:	6022      	str	r2, [r4, #0]
 80036d6:	d504      	bpl.n	80036e2 <__sflush_r+0x7e>
 80036d8:	1c42      	adds	r2, r0, #1
 80036da:	d101      	bne.n	80036e0 <__sflush_r+0x7c>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	b903      	cbnz	r3, 80036e2 <__sflush_r+0x7e>
 80036e0:	6560      	str	r0, [r4, #84]	; 0x54
 80036e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036e4:	602f      	str	r7, [r5, #0]
 80036e6:	2900      	cmp	r1, #0
 80036e8:	d0c9      	beq.n	800367e <__sflush_r+0x1a>
 80036ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036ee:	4299      	cmp	r1, r3
 80036f0:	d002      	beq.n	80036f8 <__sflush_r+0x94>
 80036f2:	4628      	mov	r0, r5
 80036f4:	f000 f994 	bl	8003a20 <_free_r>
 80036f8:	2000      	movs	r0, #0
 80036fa:	6360      	str	r0, [r4, #52]	; 0x34
 80036fc:	e7c0      	b.n	8003680 <__sflush_r+0x1c>
 80036fe:	2301      	movs	r3, #1
 8003700:	4628      	mov	r0, r5
 8003702:	47b0      	blx	r6
 8003704:	1c41      	adds	r1, r0, #1
 8003706:	d1c8      	bne.n	800369a <__sflush_r+0x36>
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0c5      	beq.n	800369a <__sflush_r+0x36>
 800370e:	2b1d      	cmp	r3, #29
 8003710:	d001      	beq.n	8003716 <__sflush_r+0xb2>
 8003712:	2b16      	cmp	r3, #22
 8003714:	d101      	bne.n	800371a <__sflush_r+0xb6>
 8003716:	602f      	str	r7, [r5, #0]
 8003718:	e7b1      	b.n	800367e <__sflush_r+0x1a>
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003720:	81a3      	strh	r3, [r4, #12]
 8003722:	e7ad      	b.n	8003680 <__sflush_r+0x1c>
 8003724:	690f      	ldr	r7, [r1, #16]
 8003726:	2f00      	cmp	r7, #0
 8003728:	d0a9      	beq.n	800367e <__sflush_r+0x1a>
 800372a:	0793      	lsls	r3, r2, #30
 800372c:	680e      	ldr	r6, [r1, #0]
 800372e:	bf08      	it	eq
 8003730:	694b      	ldreq	r3, [r1, #20]
 8003732:	600f      	str	r7, [r1, #0]
 8003734:	bf18      	it	ne
 8003736:	2300      	movne	r3, #0
 8003738:	eba6 0807 	sub.w	r8, r6, r7
 800373c:	608b      	str	r3, [r1, #8]
 800373e:	f1b8 0f00 	cmp.w	r8, #0
 8003742:	dd9c      	ble.n	800367e <__sflush_r+0x1a>
 8003744:	4643      	mov	r3, r8
 8003746:	463a      	mov	r2, r7
 8003748:	6a21      	ldr	r1, [r4, #32]
 800374a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800374c:	4628      	mov	r0, r5
 800374e:	47b0      	blx	r6
 8003750:	2800      	cmp	r0, #0
 8003752:	dc06      	bgt.n	8003762 <__sflush_r+0xfe>
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800375a:	81a3      	strh	r3, [r4, #12]
 800375c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003760:	e78e      	b.n	8003680 <__sflush_r+0x1c>
 8003762:	4407      	add	r7, r0
 8003764:	eba8 0800 	sub.w	r8, r8, r0
 8003768:	e7e9      	b.n	800373e <__sflush_r+0xda>
 800376a:	bf00      	nop
 800376c:	20400001 	.word	0x20400001

08003770 <_fflush_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	690b      	ldr	r3, [r1, #16]
 8003774:	4605      	mov	r5, r0
 8003776:	460c      	mov	r4, r1
 8003778:	b1db      	cbz	r3, 80037b2 <_fflush_r+0x42>
 800377a:	b118      	cbz	r0, 8003784 <_fflush_r+0x14>
 800377c:	6983      	ldr	r3, [r0, #24]
 800377e:	b90b      	cbnz	r3, 8003784 <_fflush_r+0x14>
 8003780:	f000 f860 	bl	8003844 <__sinit>
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <_fflush_r+0x48>)
 8003786:	429c      	cmp	r4, r3
 8003788:	d109      	bne.n	800379e <_fflush_r+0x2e>
 800378a:	686c      	ldr	r4, [r5, #4]
 800378c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003790:	b17b      	cbz	r3, 80037b2 <_fflush_r+0x42>
 8003792:	4621      	mov	r1, r4
 8003794:	4628      	mov	r0, r5
 8003796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800379a:	f7ff bf63 	b.w	8003664 <__sflush_r>
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <_fflush_r+0x4c>)
 80037a0:	429c      	cmp	r4, r3
 80037a2:	d101      	bne.n	80037a8 <_fflush_r+0x38>
 80037a4:	68ac      	ldr	r4, [r5, #8]
 80037a6:	e7f1      	b.n	800378c <_fflush_r+0x1c>
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <_fflush_r+0x50>)
 80037aa:	429c      	cmp	r4, r3
 80037ac:	bf08      	it	eq
 80037ae:	68ec      	ldreq	r4, [r5, #12]
 80037b0:	e7ec      	b.n	800378c <_fflush_r+0x1c>
 80037b2:	2000      	movs	r0, #0
 80037b4:	bd38      	pop	{r3, r4, r5, pc}
 80037b6:	bf00      	nop
 80037b8:	08004390 	.word	0x08004390
 80037bc:	080043b0 	.word	0x080043b0
 80037c0:	08004370 	.word	0x08004370

080037c4 <std>:
 80037c4:	2300      	movs	r3, #0
 80037c6:	b510      	push	{r4, lr}
 80037c8:	4604      	mov	r4, r0
 80037ca:	e9c0 3300 	strd	r3, r3, [r0]
 80037ce:	6083      	str	r3, [r0, #8]
 80037d0:	8181      	strh	r1, [r0, #12]
 80037d2:	6643      	str	r3, [r0, #100]	; 0x64
 80037d4:	81c2      	strh	r2, [r0, #14]
 80037d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037da:	6183      	str	r3, [r0, #24]
 80037dc:	4619      	mov	r1, r3
 80037de:	2208      	movs	r2, #8
 80037e0:	305c      	adds	r0, #92	; 0x5c
 80037e2:	f7ff fde7 	bl	80033b4 <memset>
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <std+0x38>)
 80037e8:	6263      	str	r3, [r4, #36]	; 0x24
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <std+0x3c>)
 80037ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <std+0x40>)
 80037f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <std+0x44>)
 80037f4:	6224      	str	r4, [r4, #32]
 80037f6:	6323      	str	r3, [r4, #48]	; 0x30
 80037f8:	bd10      	pop	{r4, pc}
 80037fa:	bf00      	nop
 80037fc:	0800418d 	.word	0x0800418d
 8003800:	080041af 	.word	0x080041af
 8003804:	080041e7 	.word	0x080041e7
 8003808:	0800420b 	.word	0x0800420b

0800380c <_cleanup_r>:
 800380c:	4901      	ldr	r1, [pc, #4]	; (8003814 <_cleanup_r+0x8>)
 800380e:	f000 b885 	b.w	800391c <_fwalk_reent>
 8003812:	bf00      	nop
 8003814:	08003771 	.word	0x08003771

08003818 <__sfmoreglue>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	1e4a      	subs	r2, r1, #1
 800381c:	2568      	movs	r5, #104	; 0x68
 800381e:	4355      	muls	r5, r2
 8003820:	460e      	mov	r6, r1
 8003822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003826:	f000 f949 	bl	8003abc <_malloc_r>
 800382a:	4604      	mov	r4, r0
 800382c:	b140      	cbz	r0, 8003840 <__sfmoreglue+0x28>
 800382e:	2100      	movs	r1, #0
 8003830:	e9c0 1600 	strd	r1, r6, [r0]
 8003834:	300c      	adds	r0, #12
 8003836:	60a0      	str	r0, [r4, #8]
 8003838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800383c:	f7ff fdba 	bl	80033b4 <memset>
 8003840:	4620      	mov	r0, r4
 8003842:	bd70      	pop	{r4, r5, r6, pc}

08003844 <__sinit>:
 8003844:	6983      	ldr	r3, [r0, #24]
 8003846:	b510      	push	{r4, lr}
 8003848:	4604      	mov	r4, r0
 800384a:	bb33      	cbnz	r3, 800389a <__sinit+0x56>
 800384c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003850:	6503      	str	r3, [r0, #80]	; 0x50
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <__sinit+0x58>)
 8003854:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <__sinit+0x5c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6282      	str	r2, [r0, #40]	; 0x28
 800385a:	4298      	cmp	r0, r3
 800385c:	bf04      	itt	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	6183      	streq	r3, [r0, #24]
 8003862:	f000 f81f 	bl	80038a4 <__sfp>
 8003866:	6060      	str	r0, [r4, #4]
 8003868:	4620      	mov	r0, r4
 800386a:	f000 f81b 	bl	80038a4 <__sfp>
 800386e:	60a0      	str	r0, [r4, #8]
 8003870:	4620      	mov	r0, r4
 8003872:	f000 f817 	bl	80038a4 <__sfp>
 8003876:	2200      	movs	r2, #0
 8003878:	60e0      	str	r0, [r4, #12]
 800387a:	2104      	movs	r1, #4
 800387c:	6860      	ldr	r0, [r4, #4]
 800387e:	f7ff ffa1 	bl	80037c4 <std>
 8003882:	2201      	movs	r2, #1
 8003884:	2109      	movs	r1, #9
 8003886:	68a0      	ldr	r0, [r4, #8]
 8003888:	f7ff ff9c 	bl	80037c4 <std>
 800388c:	2202      	movs	r2, #2
 800388e:	2112      	movs	r1, #18
 8003890:	68e0      	ldr	r0, [r4, #12]
 8003892:	f7ff ff97 	bl	80037c4 <std>
 8003896:	2301      	movs	r3, #1
 8003898:	61a3      	str	r3, [r4, #24]
 800389a:	bd10      	pop	{r4, pc}
 800389c:	0800436c 	.word	0x0800436c
 80038a0:	0800380d 	.word	0x0800380d

080038a4 <__sfp>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <__sfp+0x70>)
 80038a8:	681e      	ldr	r6, [r3, #0]
 80038aa:	69b3      	ldr	r3, [r6, #24]
 80038ac:	4607      	mov	r7, r0
 80038ae:	b913      	cbnz	r3, 80038b6 <__sfp+0x12>
 80038b0:	4630      	mov	r0, r6
 80038b2:	f7ff ffc7 	bl	8003844 <__sinit>
 80038b6:	3648      	adds	r6, #72	; 0x48
 80038b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038bc:	3b01      	subs	r3, #1
 80038be:	d503      	bpl.n	80038c8 <__sfp+0x24>
 80038c0:	6833      	ldr	r3, [r6, #0]
 80038c2:	b133      	cbz	r3, 80038d2 <__sfp+0x2e>
 80038c4:	6836      	ldr	r6, [r6, #0]
 80038c6:	e7f7      	b.n	80038b8 <__sfp+0x14>
 80038c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038cc:	b16d      	cbz	r5, 80038ea <__sfp+0x46>
 80038ce:	3468      	adds	r4, #104	; 0x68
 80038d0:	e7f4      	b.n	80038bc <__sfp+0x18>
 80038d2:	2104      	movs	r1, #4
 80038d4:	4638      	mov	r0, r7
 80038d6:	f7ff ff9f 	bl	8003818 <__sfmoreglue>
 80038da:	6030      	str	r0, [r6, #0]
 80038dc:	2800      	cmp	r0, #0
 80038de:	d1f1      	bne.n	80038c4 <__sfp+0x20>
 80038e0:	230c      	movs	r3, #12
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4604      	mov	r4, r0
 80038e6:	4620      	mov	r0, r4
 80038e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <__sfp+0x74>)
 80038ec:	6665      	str	r5, [r4, #100]	; 0x64
 80038ee:	e9c4 5500 	strd	r5, r5, [r4]
 80038f2:	60a5      	str	r5, [r4, #8]
 80038f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80038f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80038fc:	2208      	movs	r2, #8
 80038fe:	4629      	mov	r1, r5
 8003900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003904:	f7ff fd56 	bl	80033b4 <memset>
 8003908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800390c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003910:	e7e9      	b.n	80038e6 <__sfp+0x42>
 8003912:	bf00      	nop
 8003914:	0800436c 	.word	0x0800436c
 8003918:	ffff0001 	.word	0xffff0001

0800391c <_fwalk_reent>:
 800391c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003920:	4680      	mov	r8, r0
 8003922:	4689      	mov	r9, r1
 8003924:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003928:	2600      	movs	r6, #0
 800392a:	b914      	cbnz	r4, 8003932 <_fwalk_reent+0x16>
 800392c:	4630      	mov	r0, r6
 800392e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003932:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003936:	3f01      	subs	r7, #1
 8003938:	d501      	bpl.n	800393e <_fwalk_reent+0x22>
 800393a:	6824      	ldr	r4, [r4, #0]
 800393c:	e7f5      	b.n	800392a <_fwalk_reent+0xe>
 800393e:	89ab      	ldrh	r3, [r5, #12]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d907      	bls.n	8003954 <_fwalk_reent+0x38>
 8003944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003948:	3301      	adds	r3, #1
 800394a:	d003      	beq.n	8003954 <_fwalk_reent+0x38>
 800394c:	4629      	mov	r1, r5
 800394e:	4640      	mov	r0, r8
 8003950:	47c8      	blx	r9
 8003952:	4306      	orrs	r6, r0
 8003954:	3568      	adds	r5, #104	; 0x68
 8003956:	e7ee      	b.n	8003936 <_fwalk_reent+0x1a>

08003958 <__swhatbuf_r>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	460e      	mov	r6, r1
 800395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003960:	2900      	cmp	r1, #0
 8003962:	b096      	sub	sp, #88	; 0x58
 8003964:	4614      	mov	r4, r2
 8003966:	461d      	mov	r5, r3
 8003968:	da07      	bge.n	800397a <__swhatbuf_r+0x22>
 800396a:	2300      	movs	r3, #0
 800396c:	602b      	str	r3, [r5, #0]
 800396e:	89b3      	ldrh	r3, [r6, #12]
 8003970:	061a      	lsls	r2, r3, #24
 8003972:	d410      	bmi.n	8003996 <__swhatbuf_r+0x3e>
 8003974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003978:	e00e      	b.n	8003998 <__swhatbuf_r+0x40>
 800397a:	466a      	mov	r2, sp
 800397c:	f000 fc6c 	bl	8004258 <_fstat_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	dbf2      	blt.n	800396a <__swhatbuf_r+0x12>
 8003984:	9a01      	ldr	r2, [sp, #4]
 8003986:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800398a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800398e:	425a      	negs	r2, r3
 8003990:	415a      	adcs	r2, r3
 8003992:	602a      	str	r2, [r5, #0]
 8003994:	e7ee      	b.n	8003974 <__swhatbuf_r+0x1c>
 8003996:	2340      	movs	r3, #64	; 0x40
 8003998:	2000      	movs	r0, #0
 800399a:	6023      	str	r3, [r4, #0]
 800399c:	b016      	add	sp, #88	; 0x58
 800399e:	bd70      	pop	{r4, r5, r6, pc}

080039a0 <__smakebuf_r>:
 80039a0:	898b      	ldrh	r3, [r1, #12]
 80039a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039a4:	079d      	lsls	r5, r3, #30
 80039a6:	4606      	mov	r6, r0
 80039a8:	460c      	mov	r4, r1
 80039aa:	d507      	bpl.n	80039bc <__smakebuf_r+0x1c>
 80039ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	6123      	str	r3, [r4, #16]
 80039b4:	2301      	movs	r3, #1
 80039b6:	6163      	str	r3, [r4, #20]
 80039b8:	b002      	add	sp, #8
 80039ba:	bd70      	pop	{r4, r5, r6, pc}
 80039bc:	ab01      	add	r3, sp, #4
 80039be:	466a      	mov	r2, sp
 80039c0:	f7ff ffca 	bl	8003958 <__swhatbuf_r>
 80039c4:	9900      	ldr	r1, [sp, #0]
 80039c6:	4605      	mov	r5, r0
 80039c8:	4630      	mov	r0, r6
 80039ca:	f000 f877 	bl	8003abc <_malloc_r>
 80039ce:	b948      	cbnz	r0, 80039e4 <__smakebuf_r+0x44>
 80039d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d4:	059a      	lsls	r2, r3, #22
 80039d6:	d4ef      	bmi.n	80039b8 <__smakebuf_r+0x18>
 80039d8:	f023 0303 	bic.w	r3, r3, #3
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	81a3      	strh	r3, [r4, #12]
 80039e2:	e7e3      	b.n	80039ac <__smakebuf_r+0xc>
 80039e4:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <__smakebuf_r+0x7c>)
 80039e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	6020      	str	r0, [r4, #0]
 80039ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f0:	81a3      	strh	r3, [r4, #12]
 80039f2:	9b00      	ldr	r3, [sp, #0]
 80039f4:	6163      	str	r3, [r4, #20]
 80039f6:	9b01      	ldr	r3, [sp, #4]
 80039f8:	6120      	str	r0, [r4, #16]
 80039fa:	b15b      	cbz	r3, 8003a14 <__smakebuf_r+0x74>
 80039fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 fc3b 	bl	800427c <_isatty_r>
 8003a06:	b128      	cbz	r0, 8003a14 <__smakebuf_r+0x74>
 8003a08:	89a3      	ldrh	r3, [r4, #12]
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	431d      	orrs	r5, r3
 8003a18:	81a5      	strh	r5, [r4, #12]
 8003a1a:	e7cd      	b.n	80039b8 <__smakebuf_r+0x18>
 8003a1c:	0800380d 	.word	0x0800380d

08003a20 <_free_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	4605      	mov	r5, r0
 8003a24:	2900      	cmp	r1, #0
 8003a26:	d045      	beq.n	8003ab4 <_free_r+0x94>
 8003a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a2c:	1f0c      	subs	r4, r1, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bfb8      	it	lt
 8003a32:	18e4      	addlt	r4, r4, r3
 8003a34:	f000 fc44 	bl	80042c0 <__malloc_lock>
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <_free_r+0x98>)
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	b933      	cbnz	r3, 8003a4e <_free_r+0x2e>
 8003a40:	6063      	str	r3, [r4, #4]
 8003a42:	6014      	str	r4, [r2, #0]
 8003a44:	4628      	mov	r0, r5
 8003a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a4a:	f000 bc3a 	b.w	80042c2 <__malloc_unlock>
 8003a4e:	42a3      	cmp	r3, r4
 8003a50:	d90c      	bls.n	8003a6c <_free_r+0x4c>
 8003a52:	6821      	ldr	r1, [r4, #0]
 8003a54:	1862      	adds	r2, r4, r1
 8003a56:	4293      	cmp	r3, r2
 8003a58:	bf04      	itt	eq
 8003a5a:	681a      	ldreq	r2, [r3, #0]
 8003a5c:	685b      	ldreq	r3, [r3, #4]
 8003a5e:	6063      	str	r3, [r4, #4]
 8003a60:	bf04      	itt	eq
 8003a62:	1852      	addeq	r2, r2, r1
 8003a64:	6022      	streq	r2, [r4, #0]
 8003a66:	6004      	str	r4, [r0, #0]
 8003a68:	e7ec      	b.n	8003a44 <_free_r+0x24>
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	b10a      	cbz	r2, 8003a74 <_free_r+0x54>
 8003a70:	42a2      	cmp	r2, r4
 8003a72:	d9fa      	bls.n	8003a6a <_free_r+0x4a>
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	1858      	adds	r0, r3, r1
 8003a78:	42a0      	cmp	r0, r4
 8003a7a:	d10b      	bne.n	8003a94 <_free_r+0x74>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	4401      	add	r1, r0
 8003a80:	1858      	adds	r0, r3, r1
 8003a82:	4282      	cmp	r2, r0
 8003a84:	6019      	str	r1, [r3, #0]
 8003a86:	d1dd      	bne.n	8003a44 <_free_r+0x24>
 8003a88:	6810      	ldr	r0, [r2, #0]
 8003a8a:	6852      	ldr	r2, [r2, #4]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	4401      	add	r1, r0
 8003a90:	6019      	str	r1, [r3, #0]
 8003a92:	e7d7      	b.n	8003a44 <_free_r+0x24>
 8003a94:	d902      	bls.n	8003a9c <_free_r+0x7c>
 8003a96:	230c      	movs	r3, #12
 8003a98:	602b      	str	r3, [r5, #0]
 8003a9a:	e7d3      	b.n	8003a44 <_free_r+0x24>
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	1821      	adds	r1, r4, r0
 8003aa0:	428a      	cmp	r2, r1
 8003aa2:	bf04      	itt	eq
 8003aa4:	6811      	ldreq	r1, [r2, #0]
 8003aa6:	6852      	ldreq	r2, [r2, #4]
 8003aa8:	6062      	str	r2, [r4, #4]
 8003aaa:	bf04      	itt	eq
 8003aac:	1809      	addeq	r1, r1, r0
 8003aae:	6021      	streq	r1, [r4, #0]
 8003ab0:	605c      	str	r4, [r3, #4]
 8003ab2:	e7c7      	b.n	8003a44 <_free_r+0x24>
 8003ab4:	bd38      	pop	{r3, r4, r5, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000090 	.word	0x20000090

08003abc <_malloc_r>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	1ccd      	adds	r5, r1, #3
 8003ac0:	f025 0503 	bic.w	r5, r5, #3
 8003ac4:	3508      	adds	r5, #8
 8003ac6:	2d0c      	cmp	r5, #12
 8003ac8:	bf38      	it	cc
 8003aca:	250c      	movcc	r5, #12
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	4606      	mov	r6, r0
 8003ad0:	db01      	blt.n	8003ad6 <_malloc_r+0x1a>
 8003ad2:	42a9      	cmp	r1, r5
 8003ad4:	d903      	bls.n	8003ade <_malloc_r+0x22>
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	6033      	str	r3, [r6, #0]
 8003ada:	2000      	movs	r0, #0
 8003adc:	bd70      	pop	{r4, r5, r6, pc}
 8003ade:	f000 fbef 	bl	80042c0 <__malloc_lock>
 8003ae2:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <_malloc_r+0xac>)
 8003ae4:	6814      	ldr	r4, [r2, #0]
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	b991      	cbnz	r1, 8003b10 <_malloc_r+0x54>
 8003aea:	4c20      	ldr	r4, [pc, #128]	; (8003b6c <_malloc_r+0xb0>)
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	b91b      	cbnz	r3, 8003af8 <_malloc_r+0x3c>
 8003af0:	4630      	mov	r0, r6
 8003af2:	f000 fb3b 	bl	800416c <_sbrk_r>
 8003af6:	6020      	str	r0, [r4, #0]
 8003af8:	4629      	mov	r1, r5
 8003afa:	4630      	mov	r0, r6
 8003afc:	f000 fb36 	bl	800416c <_sbrk_r>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d124      	bne.n	8003b4e <_malloc_r+0x92>
 8003b04:	230c      	movs	r3, #12
 8003b06:	6033      	str	r3, [r6, #0]
 8003b08:	4630      	mov	r0, r6
 8003b0a:	f000 fbda 	bl	80042c2 <__malloc_unlock>
 8003b0e:	e7e4      	b.n	8003ada <_malloc_r+0x1e>
 8003b10:	680b      	ldr	r3, [r1, #0]
 8003b12:	1b5b      	subs	r3, r3, r5
 8003b14:	d418      	bmi.n	8003b48 <_malloc_r+0x8c>
 8003b16:	2b0b      	cmp	r3, #11
 8003b18:	d90f      	bls.n	8003b3a <_malloc_r+0x7e>
 8003b1a:	600b      	str	r3, [r1, #0]
 8003b1c:	50cd      	str	r5, [r1, r3]
 8003b1e:	18cc      	adds	r4, r1, r3
 8003b20:	4630      	mov	r0, r6
 8003b22:	f000 fbce 	bl	80042c2 <__malloc_unlock>
 8003b26:	f104 000b 	add.w	r0, r4, #11
 8003b2a:	1d23      	adds	r3, r4, #4
 8003b2c:	f020 0007 	bic.w	r0, r0, #7
 8003b30:	1ac3      	subs	r3, r0, r3
 8003b32:	d0d3      	beq.n	8003adc <_malloc_r+0x20>
 8003b34:	425a      	negs	r2, r3
 8003b36:	50e2      	str	r2, [r4, r3]
 8003b38:	e7d0      	b.n	8003adc <_malloc_r+0x20>
 8003b3a:	428c      	cmp	r4, r1
 8003b3c:	684b      	ldr	r3, [r1, #4]
 8003b3e:	bf16      	itet	ne
 8003b40:	6063      	strne	r3, [r4, #4]
 8003b42:	6013      	streq	r3, [r2, #0]
 8003b44:	460c      	movne	r4, r1
 8003b46:	e7eb      	b.n	8003b20 <_malloc_r+0x64>
 8003b48:	460c      	mov	r4, r1
 8003b4a:	6849      	ldr	r1, [r1, #4]
 8003b4c:	e7cc      	b.n	8003ae8 <_malloc_r+0x2c>
 8003b4e:	1cc4      	adds	r4, r0, #3
 8003b50:	f024 0403 	bic.w	r4, r4, #3
 8003b54:	42a0      	cmp	r0, r4
 8003b56:	d005      	beq.n	8003b64 <_malloc_r+0xa8>
 8003b58:	1a21      	subs	r1, r4, r0
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f000 fb06 	bl	800416c <_sbrk_r>
 8003b60:	3001      	adds	r0, #1
 8003b62:	d0cf      	beq.n	8003b04 <_malloc_r+0x48>
 8003b64:	6025      	str	r5, [r4, #0]
 8003b66:	e7db      	b.n	8003b20 <_malloc_r+0x64>
 8003b68:	20000090 	.word	0x20000090
 8003b6c:	20000094 	.word	0x20000094

08003b70 <__sfputc_r>:
 8003b70:	6893      	ldr	r3, [r2, #8]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	b410      	push	{r4}
 8003b78:	6093      	str	r3, [r2, #8]
 8003b7a:	da08      	bge.n	8003b8e <__sfputc_r+0x1e>
 8003b7c:	6994      	ldr	r4, [r2, #24]
 8003b7e:	42a3      	cmp	r3, r4
 8003b80:	db01      	blt.n	8003b86 <__sfputc_r+0x16>
 8003b82:	290a      	cmp	r1, #10
 8003b84:	d103      	bne.n	8003b8e <__sfputc_r+0x1e>
 8003b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b8a:	f7ff bcab 	b.w	80034e4 <__swbuf_r>
 8003b8e:	6813      	ldr	r3, [r2, #0]
 8003b90:	1c58      	adds	r0, r3, #1
 8003b92:	6010      	str	r0, [r2, #0]
 8003b94:	7019      	strb	r1, [r3, #0]
 8003b96:	4608      	mov	r0, r1
 8003b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <__sfputs_r>:
 8003b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba0:	4606      	mov	r6, r0
 8003ba2:	460f      	mov	r7, r1
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	18d5      	adds	r5, r2, r3
 8003ba8:	42ac      	cmp	r4, r5
 8003baa:	d101      	bne.n	8003bb0 <__sfputs_r+0x12>
 8003bac:	2000      	movs	r0, #0
 8003bae:	e007      	b.n	8003bc0 <__sfputs_r+0x22>
 8003bb0:	463a      	mov	r2, r7
 8003bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f7ff ffda 	bl	8003b70 <__sfputc_r>
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	d1f3      	bne.n	8003ba8 <__sfputs_r+0xa>
 8003bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bc4 <_vfiprintf_r>:
 8003bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc8:	460c      	mov	r4, r1
 8003bca:	b09d      	sub	sp, #116	; 0x74
 8003bcc:	4617      	mov	r7, r2
 8003bce:	461d      	mov	r5, r3
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	b118      	cbz	r0, 8003bdc <_vfiprintf_r+0x18>
 8003bd4:	6983      	ldr	r3, [r0, #24]
 8003bd6:	b90b      	cbnz	r3, 8003bdc <_vfiprintf_r+0x18>
 8003bd8:	f7ff fe34 	bl	8003844 <__sinit>
 8003bdc:	4b7c      	ldr	r3, [pc, #496]	; (8003dd0 <_vfiprintf_r+0x20c>)
 8003bde:	429c      	cmp	r4, r3
 8003be0:	d158      	bne.n	8003c94 <_vfiprintf_r+0xd0>
 8003be2:	6874      	ldr	r4, [r6, #4]
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	0718      	lsls	r0, r3, #28
 8003be8:	d55e      	bpl.n	8003ca8 <_vfiprintf_r+0xe4>
 8003bea:	6923      	ldr	r3, [r4, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05b      	beq.n	8003ca8 <_vfiprintf_r+0xe4>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bfa:	2330      	movs	r3, #48	; 0x30
 8003bfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c00:	9503      	str	r5, [sp, #12]
 8003c02:	f04f 0b01 	mov.w	fp, #1
 8003c06:	46b8      	mov	r8, r7
 8003c08:	4645      	mov	r5, r8
 8003c0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c0e:	b10b      	cbz	r3, 8003c14 <_vfiprintf_r+0x50>
 8003c10:	2b25      	cmp	r3, #37	; 0x25
 8003c12:	d154      	bne.n	8003cbe <_vfiprintf_r+0xfa>
 8003c14:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c18:	d00b      	beq.n	8003c32 <_vfiprintf_r+0x6e>
 8003c1a:	4653      	mov	r3, sl
 8003c1c:	463a      	mov	r2, r7
 8003c1e:	4621      	mov	r1, r4
 8003c20:	4630      	mov	r0, r6
 8003c22:	f7ff ffbc 	bl	8003b9e <__sfputs_r>
 8003c26:	3001      	adds	r0, #1
 8003c28:	f000 80c2 	beq.w	8003db0 <_vfiprintf_r+0x1ec>
 8003c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2e:	4453      	add	r3, sl
 8003c30:	9309      	str	r3, [sp, #36]	; 0x24
 8003c32:	f898 3000 	ldrb.w	r3, [r8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80ba 	beq.w	8003db0 <_vfiprintf_r+0x1ec>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c46:	9304      	str	r3, [sp, #16]
 8003c48:	9307      	str	r3, [sp, #28]
 8003c4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c4e:	931a      	str	r3, [sp, #104]	; 0x68
 8003c50:	46a8      	mov	r8, r5
 8003c52:	2205      	movs	r2, #5
 8003c54:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c58:	485e      	ldr	r0, [pc, #376]	; (8003dd4 <_vfiprintf_r+0x210>)
 8003c5a:	f7fc fab9 	bl	80001d0 <memchr>
 8003c5e:	9b04      	ldr	r3, [sp, #16]
 8003c60:	bb78      	cbnz	r0, 8003cc2 <_vfiprintf_r+0xfe>
 8003c62:	06d9      	lsls	r1, r3, #27
 8003c64:	bf44      	itt	mi
 8003c66:	2220      	movmi	r2, #32
 8003c68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c6c:	071a      	lsls	r2, r3, #28
 8003c6e:	bf44      	itt	mi
 8003c70:	222b      	movmi	r2, #43	; 0x2b
 8003c72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c76:	782a      	ldrb	r2, [r5, #0]
 8003c78:	2a2a      	cmp	r2, #42	; 0x2a
 8003c7a:	d02a      	beq.n	8003cd2 <_vfiprintf_r+0x10e>
 8003c7c:	9a07      	ldr	r2, [sp, #28]
 8003c7e:	46a8      	mov	r8, r5
 8003c80:	2000      	movs	r0, #0
 8003c82:	250a      	movs	r5, #10
 8003c84:	4641      	mov	r1, r8
 8003c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c8a:	3b30      	subs	r3, #48	; 0x30
 8003c8c:	2b09      	cmp	r3, #9
 8003c8e:	d969      	bls.n	8003d64 <_vfiprintf_r+0x1a0>
 8003c90:	b360      	cbz	r0, 8003cec <_vfiprintf_r+0x128>
 8003c92:	e024      	b.n	8003cde <_vfiprintf_r+0x11a>
 8003c94:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <_vfiprintf_r+0x214>)
 8003c96:	429c      	cmp	r4, r3
 8003c98:	d101      	bne.n	8003c9e <_vfiprintf_r+0xda>
 8003c9a:	68b4      	ldr	r4, [r6, #8]
 8003c9c:	e7a2      	b.n	8003be4 <_vfiprintf_r+0x20>
 8003c9e:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <_vfiprintf_r+0x218>)
 8003ca0:	429c      	cmp	r4, r3
 8003ca2:	bf08      	it	eq
 8003ca4:	68f4      	ldreq	r4, [r6, #12]
 8003ca6:	e79d      	b.n	8003be4 <_vfiprintf_r+0x20>
 8003ca8:	4621      	mov	r1, r4
 8003caa:	4630      	mov	r0, r6
 8003cac:	f7ff fc6c 	bl	8003588 <__swsetup_r>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d09d      	beq.n	8003bf0 <_vfiprintf_r+0x2c>
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cb8:	b01d      	add	sp, #116	; 0x74
 8003cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cbe:	46a8      	mov	r8, r5
 8003cc0:	e7a2      	b.n	8003c08 <_vfiprintf_r+0x44>
 8003cc2:	4a44      	ldr	r2, [pc, #272]	; (8003dd4 <_vfiprintf_r+0x210>)
 8003cc4:	1a80      	subs	r0, r0, r2
 8003cc6:	fa0b f000 	lsl.w	r0, fp, r0
 8003cca:	4318      	orrs	r0, r3
 8003ccc:	9004      	str	r0, [sp, #16]
 8003cce:	4645      	mov	r5, r8
 8003cd0:	e7be      	b.n	8003c50 <_vfiprintf_r+0x8c>
 8003cd2:	9a03      	ldr	r2, [sp, #12]
 8003cd4:	1d11      	adds	r1, r2, #4
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	9103      	str	r1, [sp, #12]
 8003cda:	2a00      	cmp	r2, #0
 8003cdc:	db01      	blt.n	8003ce2 <_vfiprintf_r+0x11e>
 8003cde:	9207      	str	r2, [sp, #28]
 8003ce0:	e004      	b.n	8003cec <_vfiprintf_r+0x128>
 8003ce2:	4252      	negs	r2, r2
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	9207      	str	r2, [sp, #28]
 8003cea:	9304      	str	r3, [sp, #16]
 8003cec:	f898 3000 	ldrb.w	r3, [r8]
 8003cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8003cf2:	d10e      	bne.n	8003d12 <_vfiprintf_r+0x14e>
 8003cf4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfa:	d138      	bne.n	8003d6e <_vfiprintf_r+0x1aa>
 8003cfc:	9b03      	ldr	r3, [sp, #12]
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	9203      	str	r2, [sp, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bfb8      	it	lt
 8003d08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d0c:	f108 0802 	add.w	r8, r8, #2
 8003d10:	9305      	str	r3, [sp, #20]
 8003d12:	4d33      	ldr	r5, [pc, #204]	; (8003de0 <_vfiprintf_r+0x21c>)
 8003d14:	f898 1000 	ldrb.w	r1, [r8]
 8003d18:	2203      	movs	r2, #3
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f7fc fa58 	bl	80001d0 <memchr>
 8003d20:	b140      	cbz	r0, 8003d34 <_vfiprintf_r+0x170>
 8003d22:	2340      	movs	r3, #64	; 0x40
 8003d24:	1b40      	subs	r0, r0, r5
 8003d26:	fa03 f000 	lsl.w	r0, r3, r0
 8003d2a:	9b04      	ldr	r3, [sp, #16]
 8003d2c:	4303      	orrs	r3, r0
 8003d2e:	f108 0801 	add.w	r8, r8, #1
 8003d32:	9304      	str	r3, [sp, #16]
 8003d34:	f898 1000 	ldrb.w	r1, [r8]
 8003d38:	482a      	ldr	r0, [pc, #168]	; (8003de4 <_vfiprintf_r+0x220>)
 8003d3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d3e:	2206      	movs	r2, #6
 8003d40:	f108 0701 	add.w	r7, r8, #1
 8003d44:	f7fc fa44 	bl	80001d0 <memchr>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d037      	beq.n	8003dbc <_vfiprintf_r+0x1f8>
 8003d4c:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <_vfiprintf_r+0x224>)
 8003d4e:	bb1b      	cbnz	r3, 8003d98 <_vfiprintf_r+0x1d4>
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	3307      	adds	r3, #7
 8003d54:	f023 0307 	bic.w	r3, r3, #7
 8003d58:	3308      	adds	r3, #8
 8003d5a:	9303      	str	r3, [sp, #12]
 8003d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d5e:	444b      	add	r3, r9
 8003d60:	9309      	str	r3, [sp, #36]	; 0x24
 8003d62:	e750      	b.n	8003c06 <_vfiprintf_r+0x42>
 8003d64:	fb05 3202 	mla	r2, r5, r2, r3
 8003d68:	2001      	movs	r0, #1
 8003d6a:	4688      	mov	r8, r1
 8003d6c:	e78a      	b.n	8003c84 <_vfiprintf_r+0xc0>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f108 0801 	add.w	r8, r8, #1
 8003d74:	9305      	str	r3, [sp, #20]
 8003d76:	4619      	mov	r1, r3
 8003d78:	250a      	movs	r5, #10
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d80:	3a30      	subs	r2, #48	; 0x30
 8003d82:	2a09      	cmp	r2, #9
 8003d84:	d903      	bls.n	8003d8e <_vfiprintf_r+0x1ca>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0c3      	beq.n	8003d12 <_vfiprintf_r+0x14e>
 8003d8a:	9105      	str	r1, [sp, #20]
 8003d8c:	e7c1      	b.n	8003d12 <_vfiprintf_r+0x14e>
 8003d8e:	fb05 2101 	mla	r1, r5, r1, r2
 8003d92:	2301      	movs	r3, #1
 8003d94:	4680      	mov	r8, r0
 8003d96:	e7f0      	b.n	8003d7a <_vfiprintf_r+0x1b6>
 8003d98:	ab03      	add	r3, sp, #12
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4622      	mov	r2, r4
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <_vfiprintf_r+0x228>)
 8003da0:	a904      	add	r1, sp, #16
 8003da2:	4630      	mov	r0, r6
 8003da4:	f3af 8000 	nop.w
 8003da8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003dac:	4681      	mov	r9, r0
 8003dae:	d1d5      	bne.n	8003d5c <_vfiprintf_r+0x198>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	065b      	lsls	r3, r3, #25
 8003db4:	f53f af7e 	bmi.w	8003cb4 <_vfiprintf_r+0xf0>
 8003db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dba:	e77d      	b.n	8003cb8 <_vfiprintf_r+0xf4>
 8003dbc:	ab03      	add	r3, sp, #12
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <_vfiprintf_r+0x228>)
 8003dc4:	a904      	add	r1, sp, #16
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f000 f888 	bl	8003edc <_printf_i>
 8003dcc:	e7ec      	b.n	8003da8 <_vfiprintf_r+0x1e4>
 8003dce:	bf00      	nop
 8003dd0:	08004390 	.word	0x08004390
 8003dd4:	080043d0 	.word	0x080043d0
 8003dd8:	080043b0 	.word	0x080043b0
 8003ddc:	08004370 	.word	0x08004370
 8003de0:	080043d6 	.word	0x080043d6
 8003de4:	080043da 	.word	0x080043da
 8003de8:	00000000 	.word	0x00000000
 8003dec:	08003b9f 	.word	0x08003b9f

08003df0 <_printf_common>:
 8003df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df4:	4691      	mov	r9, r2
 8003df6:	461f      	mov	r7, r3
 8003df8:	688a      	ldr	r2, [r1, #8]
 8003dfa:	690b      	ldr	r3, [r1, #16]
 8003dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e00:	4293      	cmp	r3, r2
 8003e02:	bfb8      	it	lt
 8003e04:	4613      	movlt	r3, r2
 8003e06:	f8c9 3000 	str.w	r3, [r9]
 8003e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e0e:	4606      	mov	r6, r0
 8003e10:	460c      	mov	r4, r1
 8003e12:	b112      	cbz	r2, 8003e1a <_printf_common+0x2a>
 8003e14:	3301      	adds	r3, #1
 8003e16:	f8c9 3000 	str.w	r3, [r9]
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	0699      	lsls	r1, r3, #26
 8003e1e:	bf42      	ittt	mi
 8003e20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e24:	3302      	addmi	r3, #2
 8003e26:	f8c9 3000 	strmi.w	r3, [r9]
 8003e2a:	6825      	ldr	r5, [r4, #0]
 8003e2c:	f015 0506 	ands.w	r5, r5, #6
 8003e30:	d107      	bne.n	8003e42 <_printf_common+0x52>
 8003e32:	f104 0a19 	add.w	sl, r4, #25
 8003e36:	68e3      	ldr	r3, [r4, #12]
 8003e38:	f8d9 2000 	ldr.w	r2, [r9]
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	42ab      	cmp	r3, r5
 8003e40:	dc28      	bgt.n	8003e94 <_printf_common+0xa4>
 8003e42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e46:	6822      	ldr	r2, [r4, #0]
 8003e48:	3300      	adds	r3, #0
 8003e4a:	bf18      	it	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	0692      	lsls	r2, r2, #26
 8003e50:	d42d      	bmi.n	8003eae <_printf_common+0xbe>
 8003e52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e56:	4639      	mov	r1, r7
 8003e58:	4630      	mov	r0, r6
 8003e5a:	47c0      	blx	r8
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d020      	beq.n	8003ea2 <_printf_common+0xb2>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	68e5      	ldr	r5, [r4, #12]
 8003e64:	f8d9 2000 	ldr.w	r2, [r9]
 8003e68:	f003 0306 	and.w	r3, r3, #6
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	bf08      	it	eq
 8003e70:	1aad      	subeq	r5, r5, r2
 8003e72:	68a3      	ldr	r3, [r4, #8]
 8003e74:	6922      	ldr	r2, [r4, #16]
 8003e76:	bf0c      	ite	eq
 8003e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e7c:	2500      	movne	r5, #0
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	bfc4      	itt	gt
 8003e82:	1a9b      	subgt	r3, r3, r2
 8003e84:	18ed      	addgt	r5, r5, r3
 8003e86:	f04f 0900 	mov.w	r9, #0
 8003e8a:	341a      	adds	r4, #26
 8003e8c:	454d      	cmp	r5, r9
 8003e8e:	d11a      	bne.n	8003ec6 <_printf_common+0xd6>
 8003e90:	2000      	movs	r0, #0
 8003e92:	e008      	b.n	8003ea6 <_printf_common+0xb6>
 8003e94:	2301      	movs	r3, #1
 8003e96:	4652      	mov	r2, sl
 8003e98:	4639      	mov	r1, r7
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	47c0      	blx	r8
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d103      	bne.n	8003eaa <_printf_common+0xba>
 8003ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eaa:	3501      	adds	r5, #1
 8003eac:	e7c3      	b.n	8003e36 <_printf_common+0x46>
 8003eae:	18e1      	adds	r1, r4, r3
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	2030      	movs	r0, #48	; 0x30
 8003eb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eb8:	4422      	add	r2, r4
 8003eba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ebe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	e7c5      	b.n	8003e52 <_printf_common+0x62>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4622      	mov	r2, r4
 8003eca:	4639      	mov	r1, r7
 8003ecc:	4630      	mov	r0, r6
 8003ece:	47c0      	blx	r8
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d0e6      	beq.n	8003ea2 <_printf_common+0xb2>
 8003ed4:	f109 0901 	add.w	r9, r9, #1
 8003ed8:	e7d8      	b.n	8003e8c <_printf_common+0x9c>
	...

08003edc <_printf_i>:
 8003edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ee0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	7e09      	ldrb	r1, [r1, #24]
 8003ee8:	b085      	sub	sp, #20
 8003eea:	296e      	cmp	r1, #110	; 0x6e
 8003eec:	4617      	mov	r7, r2
 8003eee:	4606      	mov	r6, r0
 8003ef0:	4698      	mov	r8, r3
 8003ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ef4:	f000 80b3 	beq.w	800405e <_printf_i+0x182>
 8003ef8:	d822      	bhi.n	8003f40 <_printf_i+0x64>
 8003efa:	2963      	cmp	r1, #99	; 0x63
 8003efc:	d036      	beq.n	8003f6c <_printf_i+0x90>
 8003efe:	d80a      	bhi.n	8003f16 <_printf_i+0x3a>
 8003f00:	2900      	cmp	r1, #0
 8003f02:	f000 80b9 	beq.w	8004078 <_printf_i+0x19c>
 8003f06:	2958      	cmp	r1, #88	; 0x58
 8003f08:	f000 8083 	beq.w	8004012 <_printf_i+0x136>
 8003f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f14:	e032      	b.n	8003f7c <_printf_i+0xa0>
 8003f16:	2964      	cmp	r1, #100	; 0x64
 8003f18:	d001      	beq.n	8003f1e <_printf_i+0x42>
 8003f1a:	2969      	cmp	r1, #105	; 0x69
 8003f1c:	d1f6      	bne.n	8003f0c <_printf_i+0x30>
 8003f1e:	6820      	ldr	r0, [r4, #0]
 8003f20:	6813      	ldr	r3, [r2, #0]
 8003f22:	0605      	lsls	r5, r0, #24
 8003f24:	f103 0104 	add.w	r1, r3, #4
 8003f28:	d52a      	bpl.n	8003f80 <_printf_i+0xa4>
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6011      	str	r1, [r2, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	da03      	bge.n	8003f3a <_printf_i+0x5e>
 8003f32:	222d      	movs	r2, #45	; 0x2d
 8003f34:	425b      	negs	r3, r3
 8003f36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f3a:	486f      	ldr	r0, [pc, #444]	; (80040f8 <_printf_i+0x21c>)
 8003f3c:	220a      	movs	r2, #10
 8003f3e:	e039      	b.n	8003fb4 <_printf_i+0xd8>
 8003f40:	2973      	cmp	r1, #115	; 0x73
 8003f42:	f000 809d 	beq.w	8004080 <_printf_i+0x1a4>
 8003f46:	d808      	bhi.n	8003f5a <_printf_i+0x7e>
 8003f48:	296f      	cmp	r1, #111	; 0x6f
 8003f4a:	d020      	beq.n	8003f8e <_printf_i+0xb2>
 8003f4c:	2970      	cmp	r1, #112	; 0x70
 8003f4e:	d1dd      	bne.n	8003f0c <_printf_i+0x30>
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	f043 0320 	orr.w	r3, r3, #32
 8003f56:	6023      	str	r3, [r4, #0]
 8003f58:	e003      	b.n	8003f62 <_printf_i+0x86>
 8003f5a:	2975      	cmp	r1, #117	; 0x75
 8003f5c:	d017      	beq.n	8003f8e <_printf_i+0xb2>
 8003f5e:	2978      	cmp	r1, #120	; 0x78
 8003f60:	d1d4      	bne.n	8003f0c <_printf_i+0x30>
 8003f62:	2378      	movs	r3, #120	; 0x78
 8003f64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f68:	4864      	ldr	r0, [pc, #400]	; (80040fc <_printf_i+0x220>)
 8003f6a:	e055      	b.n	8004018 <_printf_i+0x13c>
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	1d19      	adds	r1, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6011      	str	r1, [r2, #0]
 8003f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e08c      	b.n	800409a <_printf_i+0x1be>
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6011      	str	r1, [r2, #0]
 8003f84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f88:	bf18      	it	ne
 8003f8a:	b21b      	sxthne	r3, r3
 8003f8c:	e7cf      	b.n	8003f2e <_printf_i+0x52>
 8003f8e:	6813      	ldr	r3, [r2, #0]
 8003f90:	6825      	ldr	r5, [r4, #0]
 8003f92:	1d18      	adds	r0, r3, #4
 8003f94:	6010      	str	r0, [r2, #0]
 8003f96:	0628      	lsls	r0, r5, #24
 8003f98:	d501      	bpl.n	8003f9e <_printf_i+0xc2>
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	e002      	b.n	8003fa4 <_printf_i+0xc8>
 8003f9e:	0668      	lsls	r0, r5, #25
 8003fa0:	d5fb      	bpl.n	8003f9a <_printf_i+0xbe>
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	4854      	ldr	r0, [pc, #336]	; (80040f8 <_printf_i+0x21c>)
 8003fa6:	296f      	cmp	r1, #111	; 0x6f
 8003fa8:	bf14      	ite	ne
 8003faa:	220a      	movne	r2, #10
 8003fac:	2208      	moveq	r2, #8
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fb4:	6865      	ldr	r5, [r4, #4]
 8003fb6:	60a5      	str	r5, [r4, #8]
 8003fb8:	2d00      	cmp	r5, #0
 8003fba:	f2c0 8095 	blt.w	80040e8 <_printf_i+0x20c>
 8003fbe:	6821      	ldr	r1, [r4, #0]
 8003fc0:	f021 0104 	bic.w	r1, r1, #4
 8003fc4:	6021      	str	r1, [r4, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d13d      	bne.n	8004046 <_printf_i+0x16a>
 8003fca:	2d00      	cmp	r5, #0
 8003fcc:	f040 808e 	bne.w	80040ec <_printf_i+0x210>
 8003fd0:	4665      	mov	r5, ip
 8003fd2:	2a08      	cmp	r2, #8
 8003fd4:	d10b      	bne.n	8003fee <_printf_i+0x112>
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	07db      	lsls	r3, r3, #31
 8003fda:	d508      	bpl.n	8003fee <_printf_i+0x112>
 8003fdc:	6923      	ldr	r3, [r4, #16]
 8003fde:	6862      	ldr	r2, [r4, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	bfde      	ittt	le
 8003fe4:	2330      	movle	r3, #48	; 0x30
 8003fe6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fee:	ebac 0305 	sub.w	r3, ip, r5
 8003ff2:	6123      	str	r3, [r4, #16]
 8003ff4:	f8cd 8000 	str.w	r8, [sp]
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	aa03      	add	r2, sp, #12
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4630      	mov	r0, r6
 8004000:	f7ff fef6 	bl	8003df0 <_printf_common>
 8004004:	3001      	adds	r0, #1
 8004006:	d14d      	bne.n	80040a4 <_printf_i+0x1c8>
 8004008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800400c:	b005      	add	sp, #20
 800400e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004012:	4839      	ldr	r0, [pc, #228]	; (80040f8 <_printf_i+0x21c>)
 8004014:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004018:	6813      	ldr	r3, [r2, #0]
 800401a:	6821      	ldr	r1, [r4, #0]
 800401c:	1d1d      	adds	r5, r3, #4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6015      	str	r5, [r2, #0]
 8004022:	060a      	lsls	r2, r1, #24
 8004024:	d50b      	bpl.n	800403e <_printf_i+0x162>
 8004026:	07ca      	lsls	r2, r1, #31
 8004028:	bf44      	itt	mi
 800402a:	f041 0120 	orrmi.w	r1, r1, #32
 800402e:	6021      	strmi	r1, [r4, #0]
 8004030:	b91b      	cbnz	r3, 800403a <_printf_i+0x15e>
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	f022 0220 	bic.w	r2, r2, #32
 8004038:	6022      	str	r2, [r4, #0]
 800403a:	2210      	movs	r2, #16
 800403c:	e7b7      	b.n	8003fae <_printf_i+0xd2>
 800403e:	064d      	lsls	r5, r1, #25
 8004040:	bf48      	it	mi
 8004042:	b29b      	uxthmi	r3, r3
 8004044:	e7ef      	b.n	8004026 <_printf_i+0x14a>
 8004046:	4665      	mov	r5, ip
 8004048:	fbb3 f1f2 	udiv	r1, r3, r2
 800404c:	fb02 3311 	mls	r3, r2, r1, r3
 8004050:	5cc3      	ldrb	r3, [r0, r3]
 8004052:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004056:	460b      	mov	r3, r1
 8004058:	2900      	cmp	r1, #0
 800405a:	d1f5      	bne.n	8004048 <_printf_i+0x16c>
 800405c:	e7b9      	b.n	8003fd2 <_printf_i+0xf6>
 800405e:	6813      	ldr	r3, [r2, #0]
 8004060:	6825      	ldr	r5, [r4, #0]
 8004062:	6961      	ldr	r1, [r4, #20]
 8004064:	1d18      	adds	r0, r3, #4
 8004066:	6010      	str	r0, [r2, #0]
 8004068:	0628      	lsls	r0, r5, #24
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	d501      	bpl.n	8004072 <_printf_i+0x196>
 800406e:	6019      	str	r1, [r3, #0]
 8004070:	e002      	b.n	8004078 <_printf_i+0x19c>
 8004072:	066a      	lsls	r2, r5, #25
 8004074:	d5fb      	bpl.n	800406e <_printf_i+0x192>
 8004076:	8019      	strh	r1, [r3, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	6123      	str	r3, [r4, #16]
 800407c:	4665      	mov	r5, ip
 800407e:	e7b9      	b.n	8003ff4 <_printf_i+0x118>
 8004080:	6813      	ldr	r3, [r2, #0]
 8004082:	1d19      	adds	r1, r3, #4
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	681d      	ldr	r5, [r3, #0]
 8004088:	6862      	ldr	r2, [r4, #4]
 800408a:	2100      	movs	r1, #0
 800408c:	4628      	mov	r0, r5
 800408e:	f7fc f89f 	bl	80001d0 <memchr>
 8004092:	b108      	cbz	r0, 8004098 <_printf_i+0x1bc>
 8004094:	1b40      	subs	r0, r0, r5
 8004096:	6060      	str	r0, [r4, #4]
 8004098:	6863      	ldr	r3, [r4, #4]
 800409a:	6123      	str	r3, [r4, #16]
 800409c:	2300      	movs	r3, #0
 800409e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040a2:	e7a7      	b.n	8003ff4 <_printf_i+0x118>
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	462a      	mov	r2, r5
 80040a8:	4639      	mov	r1, r7
 80040aa:	4630      	mov	r0, r6
 80040ac:	47c0      	blx	r8
 80040ae:	3001      	adds	r0, #1
 80040b0:	d0aa      	beq.n	8004008 <_printf_i+0x12c>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	079b      	lsls	r3, r3, #30
 80040b6:	d413      	bmi.n	80040e0 <_printf_i+0x204>
 80040b8:	68e0      	ldr	r0, [r4, #12]
 80040ba:	9b03      	ldr	r3, [sp, #12]
 80040bc:	4298      	cmp	r0, r3
 80040be:	bfb8      	it	lt
 80040c0:	4618      	movlt	r0, r3
 80040c2:	e7a3      	b.n	800400c <_printf_i+0x130>
 80040c4:	2301      	movs	r3, #1
 80040c6:	464a      	mov	r2, r9
 80040c8:	4639      	mov	r1, r7
 80040ca:	4630      	mov	r0, r6
 80040cc:	47c0      	blx	r8
 80040ce:	3001      	adds	r0, #1
 80040d0:	d09a      	beq.n	8004008 <_printf_i+0x12c>
 80040d2:	3501      	adds	r5, #1
 80040d4:	68e3      	ldr	r3, [r4, #12]
 80040d6:	9a03      	ldr	r2, [sp, #12]
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	42ab      	cmp	r3, r5
 80040dc:	dcf2      	bgt.n	80040c4 <_printf_i+0x1e8>
 80040de:	e7eb      	b.n	80040b8 <_printf_i+0x1dc>
 80040e0:	2500      	movs	r5, #0
 80040e2:	f104 0919 	add.w	r9, r4, #25
 80040e6:	e7f5      	b.n	80040d4 <_printf_i+0x1f8>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1ac      	bne.n	8004046 <_printf_i+0x16a>
 80040ec:	7803      	ldrb	r3, [r0, #0]
 80040ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040f6:	e76c      	b.n	8003fd2 <_printf_i+0xf6>
 80040f8:	080043e1 	.word	0x080043e1
 80040fc:	080043f2 	.word	0x080043f2

08004100 <_putc_r>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	460d      	mov	r5, r1
 8004104:	4614      	mov	r4, r2
 8004106:	4606      	mov	r6, r0
 8004108:	b118      	cbz	r0, 8004112 <_putc_r+0x12>
 800410a:	6983      	ldr	r3, [r0, #24]
 800410c:	b90b      	cbnz	r3, 8004112 <_putc_r+0x12>
 800410e:	f7ff fb99 	bl	8003844 <__sinit>
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <_putc_r+0x60>)
 8004114:	429c      	cmp	r4, r3
 8004116:	d112      	bne.n	800413e <_putc_r+0x3e>
 8004118:	6874      	ldr	r4, [r6, #4]
 800411a:	68a3      	ldr	r3, [r4, #8]
 800411c:	3b01      	subs	r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	60a3      	str	r3, [r4, #8]
 8004122:	da16      	bge.n	8004152 <_putc_r+0x52>
 8004124:	69a2      	ldr	r2, [r4, #24]
 8004126:	4293      	cmp	r3, r2
 8004128:	db02      	blt.n	8004130 <_putc_r+0x30>
 800412a:	b2eb      	uxtb	r3, r5
 800412c:	2b0a      	cmp	r3, #10
 800412e:	d110      	bne.n	8004152 <_putc_r+0x52>
 8004130:	4622      	mov	r2, r4
 8004132:	4629      	mov	r1, r5
 8004134:	4630      	mov	r0, r6
 8004136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800413a:	f7ff b9d3 	b.w	80034e4 <__swbuf_r>
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <_putc_r+0x64>)
 8004140:	429c      	cmp	r4, r3
 8004142:	d101      	bne.n	8004148 <_putc_r+0x48>
 8004144:	68b4      	ldr	r4, [r6, #8]
 8004146:	e7e8      	b.n	800411a <_putc_r+0x1a>
 8004148:	4b07      	ldr	r3, [pc, #28]	; (8004168 <_putc_r+0x68>)
 800414a:	429c      	cmp	r4, r3
 800414c:	bf08      	it	eq
 800414e:	68f4      	ldreq	r4, [r6, #12]
 8004150:	e7e3      	b.n	800411a <_putc_r+0x1a>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	6022      	str	r2, [r4, #0]
 8004158:	701d      	strb	r5, [r3, #0]
 800415a:	b2e8      	uxtb	r0, r5
 800415c:	bd70      	pop	{r4, r5, r6, pc}
 800415e:	bf00      	nop
 8004160:	08004390 	.word	0x08004390
 8004164:	080043b0 	.word	0x080043b0
 8004168:	08004370 	.word	0x08004370

0800416c <_sbrk_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4c06      	ldr	r4, [pc, #24]	; (8004188 <_sbrk_r+0x1c>)
 8004170:	2300      	movs	r3, #0
 8004172:	4605      	mov	r5, r0
 8004174:	4608      	mov	r0, r1
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	f7fc fca4 	bl	8000ac4 <_sbrk>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	d102      	bne.n	8004186 <_sbrk_r+0x1a>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	b103      	cbz	r3, 8004186 <_sbrk_r+0x1a>
 8004184:	602b      	str	r3, [r5, #0]
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	20000168 	.word	0x20000168

0800418c <__sread>:
 800418c:	b510      	push	{r4, lr}
 800418e:	460c      	mov	r4, r1
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	f000 f896 	bl	80042c4 <_read_r>
 8004198:	2800      	cmp	r0, #0
 800419a:	bfab      	itete	ge
 800419c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800419e:	89a3      	ldrhlt	r3, [r4, #12]
 80041a0:	181b      	addge	r3, r3, r0
 80041a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041a6:	bfac      	ite	ge
 80041a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80041aa:	81a3      	strhlt	r3, [r4, #12]
 80041ac:	bd10      	pop	{r4, pc}

080041ae <__swrite>:
 80041ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b2:	461f      	mov	r7, r3
 80041b4:	898b      	ldrh	r3, [r1, #12]
 80041b6:	05db      	lsls	r3, r3, #23
 80041b8:	4605      	mov	r5, r0
 80041ba:	460c      	mov	r4, r1
 80041bc:	4616      	mov	r6, r2
 80041be:	d505      	bpl.n	80041cc <__swrite+0x1e>
 80041c0:	2302      	movs	r3, #2
 80041c2:	2200      	movs	r2, #0
 80041c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c8:	f000 f868 	bl	800429c <_lseek_r>
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d6:	81a3      	strh	r3, [r4, #12]
 80041d8:	4632      	mov	r2, r6
 80041da:	463b      	mov	r3, r7
 80041dc:	4628      	mov	r0, r5
 80041de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041e2:	f000 b817 	b.w	8004214 <_write_r>

080041e6 <__sseek>:
 80041e6:	b510      	push	{r4, lr}
 80041e8:	460c      	mov	r4, r1
 80041ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ee:	f000 f855 	bl	800429c <_lseek_r>
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	bf15      	itete	ne
 80041f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80041fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004202:	81a3      	strheq	r3, [r4, #12]
 8004204:	bf18      	it	ne
 8004206:	81a3      	strhne	r3, [r4, #12]
 8004208:	bd10      	pop	{r4, pc}

0800420a <__sclose>:
 800420a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800420e:	f000 b813 	b.w	8004238 <_close_r>
	...

08004214 <_write_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4c07      	ldr	r4, [pc, #28]	; (8004234 <_write_r+0x20>)
 8004218:	4605      	mov	r5, r0
 800421a:	4608      	mov	r0, r1
 800421c:	4611      	mov	r1, r2
 800421e:	2200      	movs	r2, #0
 8004220:	6022      	str	r2, [r4, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f7fc fbfd 	bl	8000a22 <_write>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_write_r+0x1e>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	b103      	cbz	r3, 8004232 <_write_r+0x1e>
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	20000168 	.word	0x20000168

08004238 <_close_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	4c06      	ldr	r4, [pc, #24]	; (8004254 <_close_r+0x1c>)
 800423c:	2300      	movs	r3, #0
 800423e:	4605      	mov	r5, r0
 8004240:	4608      	mov	r0, r1
 8004242:	6023      	str	r3, [r4, #0]
 8004244:	f7fc fc09 	bl	8000a5a <_close>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_close_r+0x1a>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	b103      	cbz	r3, 8004252 <_close_r+0x1a>
 8004250:	602b      	str	r3, [r5, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	20000168 	.word	0x20000168

08004258 <_fstat_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4c07      	ldr	r4, [pc, #28]	; (8004278 <_fstat_r+0x20>)
 800425c:	2300      	movs	r3, #0
 800425e:	4605      	mov	r5, r0
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	f7fc fc04 	bl	8000a72 <_fstat>
 800426a:	1c43      	adds	r3, r0, #1
 800426c:	d102      	bne.n	8004274 <_fstat_r+0x1c>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	b103      	cbz	r3, 8004274 <_fstat_r+0x1c>
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	bd38      	pop	{r3, r4, r5, pc}
 8004276:	bf00      	nop
 8004278:	20000168 	.word	0x20000168

0800427c <_isatty_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4c06      	ldr	r4, [pc, #24]	; (8004298 <_isatty_r+0x1c>)
 8004280:	2300      	movs	r3, #0
 8004282:	4605      	mov	r5, r0
 8004284:	4608      	mov	r0, r1
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	f7fc fc03 	bl	8000a92 <_isatty>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d102      	bne.n	8004296 <_isatty_r+0x1a>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	b103      	cbz	r3, 8004296 <_isatty_r+0x1a>
 8004294:	602b      	str	r3, [r5, #0]
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	20000168 	.word	0x20000168

0800429c <_lseek_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4c07      	ldr	r4, [pc, #28]	; (80042bc <_lseek_r+0x20>)
 80042a0:	4605      	mov	r5, r0
 80042a2:	4608      	mov	r0, r1
 80042a4:	4611      	mov	r1, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	6022      	str	r2, [r4, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f7fc fbfc 	bl	8000aa8 <_lseek>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d102      	bne.n	80042ba <_lseek_r+0x1e>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	b103      	cbz	r3, 80042ba <_lseek_r+0x1e>
 80042b8:	602b      	str	r3, [r5, #0]
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	20000168 	.word	0x20000168

080042c0 <__malloc_lock>:
 80042c0:	4770      	bx	lr

080042c2 <__malloc_unlock>:
 80042c2:	4770      	bx	lr

080042c4 <_read_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4c07      	ldr	r4, [pc, #28]	; (80042e4 <_read_r+0x20>)
 80042c8:	4605      	mov	r5, r0
 80042ca:	4608      	mov	r0, r1
 80042cc:	4611      	mov	r1, r2
 80042ce:	2200      	movs	r2, #0
 80042d0:	6022      	str	r2, [r4, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f7fc fb88 	bl	80009e8 <_read>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d102      	bne.n	80042e2 <_read_r+0x1e>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	b103      	cbz	r3, 80042e2 <_read_r+0x1e>
 80042e0:	602b      	str	r3, [r5, #0]
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	20000168 	.word	0x20000168

080042e8 <_init>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	bf00      	nop
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr

080042f4 <_fini>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr
